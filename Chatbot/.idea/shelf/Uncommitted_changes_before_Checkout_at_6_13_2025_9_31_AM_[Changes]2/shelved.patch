Index: data/nlu.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version: \"3.1\"\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n    - hi\n    - hello there\n    - good morning\n    - good evening\n    - moin\n    - hey there\n    - let's go\n    - hey dude\n    - good afternoon\n    - hi there\n    - greetings\n    - howdy\n    - what's up\n    - hey!\n    - hiya\n    - yo\n    - hi bot\n    - hi assistant\n    - hello, can you help me?\n    - hi, I need some help\n    - hey, are you there?\n    - good day\n    - hi, travel planner\n    - hello, I want to plan a trip\n    - hi, can you assist me?\n    - hey, I need to book a trip\n    - hi, I want to go somewhere\n    - hello, I have a question\n    - hi, can you recommend something?\n    - hey, I need travel advice\n    - hi, can you suggest a destination?\n    - hello, I want to start planning\n    - hi, I want to explore Egypt\n    - hey, let's plan a vacation\n    - hi, can you help me with my journey?\n    - hello, I want to organize a trip\n    - hi, I need a travel suggestion\n    - hey, can you help me plan?\n    - hello, I want to visit Egypt\n    - hi, I want to discover new places\n    - hey, I want to travel\n    - hi, can you help me with my itinerary?\n    - hello, I want to go on an adventure\n    - hi, can you help me find a hotel?\n    - hey, I want to see some landmarks\n    - hi, can you help me with activities?\n    - hello, I want to know about Egypt\n    - hi, can you help me with my vacation?\n    - hey, I want to know more about Egypt\n- intent: goodbye\n  examples: |\n    - cu\n    - good by\n    - cee you later\n    - good night\n    - bye\n    - goodbye\n    - have a nice day\n    - see you around\n    - bye bye\n    - see you later\n    - take care\n    - see you soon\n    - later\n    - farewell\n    - see ya\n    - I'm off\n    - catch you later\n    - peace out\n    - I'm out\n    - see you next time\n    - until next time\n    - take it easy\n    - bye for now\n    - see you\n    - later alligator\n    - thanks, that's all I need\n    - I'm done, thank you\n    - that's it for now\n    - talk to you later\n    - I'll be back\n    - I'll come back if I need more help\n    - thanks for your help, bye\n    - I appreciate your help, goodbye\n    - that's all, see you\n    - thanks, see you next time\n    - I'll plan more later, bye\n    - I'll check back later\n    - thanks, I'm leaving now\n    - I have to go, bye\n    - that's enough for today\n    - I'll continue planning later\n    - see you, travel planner\n    - goodbye, assistant\n    - thanks for the suggestions, bye\n    - I'll book later, bye\n    - I'll finish this later, goodbye\n    - see you, have a great day\n    - thanks, have a nice day\n    - I'm signing off\n    - I'm logging out\n- intent: affirm\n  examples: |\n    - yes\n    - y\n    - indeed\n    - of course\n    - that sounds good\n    - correct\n    - absolutely\n    - sure\n    - definitely\n    - yup\n    - yeah\n    - right\n    - exactly\n    - you got it\n    - that's right\n    - affirmative\n    - agreed\n    - sure thing\n    - sounds good\n    - I agree\n    - totally\n    - for sure\n    - yes please\n    - you bet\n    - right on\n    - that's correct\n    - yes,i would like to go to [Luxor](state)\n    - yes, I want to go to [Cairo](state)\n    - yes, I would like to visit [Alexandria](state)\n    - yes, I want to go to [Aswan](state)\n    - yes, I would like to visit [Hurghada](state)\n    - yes, I want to go to [Sharm El Sheikh](state)\n    - yes, I would like to visit [Dahab](state)\n    - yes, I want to go to [Marsa Alam](state)\n    - yes, I would like to visit [El Gouna](state)\n    - yes, I want to go to [Siwa Oasis](state)\n    - that's perfect\n    - that's exactly what I want\n    - that's what I meant\n    - that's what I was looking for\n    - that's what I need\n    - that's what I had in mind\n    - that's what I was thinking\n    - that's what I was hoping for\n    - that's what I was planning\n    - that's what I was considering\n    - that's what I was imagining\n    - that's what I was dreaming of\n    - that's what I was wishing for\n    - that's what I was desiring\n    - yes, that's correct\n    - yes, that's right\n    - yes, that's true\n    - yes, please continue\n    - yes, go ahead\n    - yes, proceed\n    - yes, that's fine\n    - yes, that's okay\n    - yes, that's good\n    - yes, that's great\n    - yes, that's awesome\n    - yes, that's amazing\n    - yes, that's wonderful\n    - yes, that's fantastic\n    - yes, that's excellent\n    - yes, that's perfect\n    - yes, that's exactly it\n    - yes, that's exactly right\n    - yes, that's exactly correct\n    - yes, that's exactly true\n    - yes, that's exactly what I want\n    - yes, that's exactly what I need\n    - yes, that's exactly what I was looking for\n    - yes, that's exactly what I was thinking\n    - yes, that's exactly what I was hoping for\n    - yes, that's exactly what I was planning\n    - yes, that's exactly what I was considering\n    - yes, that's exactly what I was imagining\n    - yes, that's exactly what I was dreaming of\n    - yes, that's exactly what I was wishing for\n    - yes, that's exactly what I was desiring\n- intent: deny\n  examples: |\n    - no\n    - No\n    - n\n    - never\n    - I don't think so\n    - don't like that\n    - no way\n    - not really\n    - nope\n    - no thanks\n    - not at all\n    - absolutely not\n    - not interested\n    - I disagree\n    - I don't agree\n    - negative\n    - not happening\n    - no chance\n    - not possible\n    - I refuse\n    - I decline\n    - I don't know\n    - I'm not sure\n    - that's not what I want\n    - that's not correct\n    - that's not right\n    - that's not true\n    - that's not what I meant\n    - that's not what I was looking for\n    - that's not what I need\n    - that's not what I had in mind\n    - that's not what I was thinking\n    - that's not what I was hoping for\n    - that's not what I was planning\n    - that's not what I was considering\n    - that's not what I was imagining\n    - that's not what I was dreaming of\n    - that's not what I was wishing for\n    - that's not what I was desiring\n    - no, that's not correct\n    - no, that's not right\n    - no, that's not true\n    - no, that's not what I want\n    - no, that's not what I need\n    - no, that's not what I was looking for\n    - no, that's not what I was thinking\n    - no, that's not what I was hoping for\n    - no, that's not what I was planning\n    - no, that's not what I was considering\n    - no, that's not what I was imagining\n    - no, that's not what I was dreaming of\n    - no, that's not what I was wishing for\n    - no, that's not what I was desiring\n    - no, please try again\n    - no, that's not it\n    - no, that's not right at all\n    - no, that's not even close\n    - no, that's not what I meant at all\n    - no, that's not what I was talking about\n    - no, that's not what I was referring to\n    - no, that's not what I was asking for\n    - no, that's not what I was expecting\n    - no, that's not what I was hoping to hear\n    - no, that's not what I was looking to get\n    - no, that's not what I was planning to do\n    - no, that's not what I was considering doing\n    - no, that's not what I was imagining doing\n    - no, that's not what I was dreaming of doing\n    - no, that's not what I was wishing for doing\n    - no, that's not what I was desiring to do\n- intent: bot_challenge\n  examples: |\n    - are you a bot?\n    - are you a human?\n    - am I talking to a bot?\n    - am I talking to a human?\n    - are you real?\n    - are you a machine?\n    - are you automated?\n    - are you a chatbot?\n    - are you an AI?\n    - is this a bot?\n    - is this a real person?\n    - am I chatting with a bot?\n    - are you a computer?\n    - are you a program?\n    - are you a robot?\n    - are you an algorithm?\n    - are you a virtual assistant?\n    - are you a digital assistant?\n    - are you a software?\n    - are you a script?\n    - are you a real person?\n    - are you a travel bot?\n    - are you a travel assistant?\n    - are you a real travel agent?\n    - are you a real travel planner?\n    - are you a real assistant?\n    - are you a real human or a bot?\n    - are you a real person or a machine?\n    - are you a real person or a program?\n    - are you a real person or a robot?\n    - are you a real person or an algorithm?\n    - are you a real person or a virtual assistant?\n    - are you a real person or a digital assistant?\n    - are you a real person or a software?\n    - are you a real person or a script?\n    - are you a real person or an AI?\n    - are you a real person or a chatbot?\n    - are you a real person or an automated system?\n    - are you a real person or an artificial intelligence?\n    - are you a real person or an artificial being?\n    - are you a real person or an artificial entity?\n    - are you a real person or an artificial agent?\n    - are you a real person or an artificial assistant?\n    - are you a real person or an artificial travel planner?\n    - are you a real person or an artificial travel assistant?\n    - are you a real person or an artificial travel agent?\n    - are you a real person or an artificial travel bot?\n    - are you a real person or an artificial travel program?\n    - are you a real person or an artificial travel script?\n    - are you a real person or an artificial travel software?\n    - are you a real person or an artificial travel system?\n    - are you a real person or an artificial travel entity?\n    - are you a real person or an artificial travel being?\n    - are you a real person or an artificial travel intelligence?\n    - are you a real person or an artificial travel algorithm?\n    - are you a real person or an artificial travel assistant?\n    - are you a real person or an artificial travel planner?\n    - are you a real person or an artificial travel agent?\n    - are you a real person or an artificial travel bot?\n    - are you a real person or an artificial travel program?\n    - are you a real person or an artificial travel script?\n    - are you a real person or an artificial travel software?\n    - are you a real person or an artificial travel system?\n    - are you a real person or an artificial travel entity?\n    - are you a real person or an artificial travel being?\n    - are you a real person or an artificial travel intelligence?\n    - are you a real person or an artificial travel algorithm?\n- intent: thankyou\n  examples: |\n    - thanks\n    - thank you\n    - thank you very much\n    - thanks a lot\n    - thank you so much\n    - much appreciated\n    - thanks a bunch\n    - thanks a million\n    - thanks a ton\n    - thanks so much\n    - I appreciate it\n    - I'm grateful\n    - many thanks\n    - thank you kindly\n    - I can't thank you enough\n    - I owe you one\n    - you're the best\n    - thanks for your help\n    - thanks for your time\n    - thanks for the information\n    - thanks for the advice\n    - thanks for the suggestions\n    - thanks for the recommendations\n    - thanks for the tips\n    - thanks for the help\n    - thanks for the support\n    - thanks for the guidance\n    - thanks for the assistance\n    - thanks for the travel advice\n    - thanks for helping me plan\n    - thanks for helping with my trip\n    - thanks for helping with my vacation\n    - thanks for helping with my journey\n    - thanks for helping with my itinerary\n    - thanks for helping with my travel plans\n    - thanks for helping with my travel arrangements\n    - thanks for helping with my travel booking\n    - thanks for helping with my travel reservation\n    - thanks for helping with my travel schedule\n    - thanks for helping with my travel organization\n    - thanks for helping with my travel preparation\n    - thanks for helping with my travel planning\n    - thanks for helping with my travel setup\n    - thanks for helping with my travel coordination\n    - thanks for helping with my travel management\n    - thanks for helping with my travel logistics\n    - thanks for helping with my travel details\n    - thanks for helping with my travel needs\n    - thanks for helping with my travel requirements\n    - thanks for helping with my travel preferences\n    - thanks for helping with my travel options\n    - thanks for helping with my travel choices\n    - thanks for helping with my travel decisions\n    - thanks for helping with my travel questions\n    - thanks for helping with my travel concerns\n    - thanks for helping with my travel issues\n    - thanks for helping with my travel problems\n    - thanks for helping with my travel challenges\n    - thanks for helping with my travel difficulties\n    - thanks for helping with my travel obstacles\n    - thanks for helping with my travel complications\n    - thanks for helping with my travel troubles\n    - thanks for helping with my travel worries\n    - thanks for helping with my travel anxieties\n    - thanks for helping with my travel fears\n    - thanks for helping with my travel doubts\n    - thanks for helping with my travel uncertainties\n    - thanks for helping with my travel hesitations\n    - thanks for helping with my travel reservations\n    - thanks for helping with my travel apprehensions\n    - thanks for helping with my travel misgivings\n    - thanks for helping with my travel qualms\n    - thanks for helping with my travel uneasiness\n    - thanks for helping with my travel discomfort\n    - thanks for helping with my travel awkwardness\n    - thanks for helping with my travel embarrassment\n    - thanks for helping with my travel confusion\n    - thanks for helping with my travel bewilderment\n    - thanks for helping with my travel puzzlement\n    - thanks for helping with my travel perplexity\n    - thanks for helping with my travel uncertainty\n    - thanks for helping with my travel doubt\n    - thanks for helping with my travel indecision\n    - thanks for helping with my travel vacillation\n    - thanks for helping with my travel wavering\n    - thanks for helping with my travel irresolution\n    - thanks for helping with my travel indecisiveness\n    - thanks for helping with my travel tentativeness\n    - thanks for helping with my travel timidity\n    - thanks for helping with my travel shyness\n    - thanks for helping with my travel bashfulness\n    - thanks for helping with my travel reticence\n    - thanks for helping with my travel reserve\n    - thanks for helping with my travel restraint\n    - thanks for helping with my travel self-consciousness\n    - thanks for helping with my travel diffidence\n    - thanks for helping with my travel modesty\n    - thanks for helping with my travel humility\n    - thanks for helping with my travel humbleness\n    - thanks for helping with my travel meekness\n    - thanks for helping with my travel submissiveness\n    - thanks for helping with my travel docility\n    - thanks for helping with my travel compliance\n    - thanks for helping with my travel obedience\n    - thanks for helping with my travel subservience\n    - thanks for helping with my travel servility\n    - thanks for helping with my travel slavishness\n    - thanks for helping with my travel obsequiousness\n    - thanks for helping with my travel sycophancy\n    - thanks for helping with my travel toadyism\n    - thanks for helping with my travel fawning\n    - thanks for helping with my travel bootlicking\n    - thanks for helping with my travel brown-nosing\n    - thanks for helping with my travel apple-polishing\n    - thanks for helping with my travel ass-kissing\n    - thanks for helping with my travel suck-up\n    - thanks for helping with my travel flatterer\n    - thanks for helping with my travel sycophant\n    - thanks for helping with my travel toady\n    - thanks for helping with my travel bootlicker\n    - thanks for helping with my travel brown-noser\n    - thanks for helping with my travel apple-polisher\n    - thanks for helping with my travel ass-kisser\n- intent: out_of_scope\n  examples: |\n    - That's not what I asked\n    - Stop talking\n    - You are no help\n    - You are useless\n    - This is not helpful\n    - how old are you\n    - I want to order a pizza\n    - tell me the weather\n    - this isn't working\n    - I already told you that\n    - I don't want to tell you that\n    - none of your business\n    - that's not right\n    - stop asking\n    - never mind\n    - I want to do something else\n    - I changed my mind\n    - I don't need this\n    - this is irrelevant\n    - this doesn't help\n    - you're not helping\n    - this is off-topic\n    - this isn't what I wanted\n    - this is not what I was expecting\n    - this is not what I was hoping for\n    - this is not what I was thinking\n    - this is not what I was planning\n    - this is not what I was considering\n    - this is not what I was imagining\n    - this is not what I was dreaming of\n    - this is not what I was wishing for\n    - this is not what I was desiring\n    - can you tell me a joke?\n    - what's your favorite color?\n    - who is the president?\n    - what's the capital of France?\n    - can you sing a song?\n    - do you like pizza?\n    - what's 2+2?\n    - can you dance?\n    - tell me a story\n    - what's your name?\n    - do you have feelings?\n    - are you married?\n    - do you have a family?\n    - what's your favorite movie?\n    - can you play music?\n    - what's your favorite food?\n    - do you sleep?\n    - can you drive a car?\n    - what's your favorite place?\n    - do you have a pet?\n    - can you cook?\n    - what's your favorite book?\n    - do you watch TV?\n    - can you swim?\n    - what's your favorite animal?\n    - do you play sports?\n    - can you paint?\n    - what's your favorite hobby?\n    - do you have friends?\n    - can you fly?\n    - what's your favorite song?\n    - do you have a job?\n    - can you run?\n    - what's your favorite season?\n    - do you like to travel?\n    - can you write poetry?\n    - what's your favorite holiday?\n    - do you like art?\n    - can you solve math problems?\n    - what's your favorite subject?\n    - do you like science?\n    - can you speak other languages?\n    - what's your favorite language?\n    - do you like history?\n    - can you tell me a secret?\n    - what's your favorite sport?\n    - do you like music?\n    - can you tell me a riddle?\n    - what's your favorite game?\n    - do you like games?\n    - can you tell me a fun fact?\n    - what's your favorite TV show?\n    - do you like movies?\n    - can you tell me a joke about cats?\n    - what's your favorite drink?\n    - do you like coffee?\n    - can you tell me a joke about dogs?\n    - what's your favorite dessert?\n    - do you like chocolate?\n    - can you tell me a joke about travel?\n    - what's your favorite city?\n    - do you like cities?\n    - can you tell me a joke about Egypt?\n    - what's your favorite Egyptian food?\n    - do you like Egyptian food?\n    - can you tell me a joke about pyramids?\n    - what's your favorite pyramid?\n    - do you like pyramids?\n    - can you tell me a joke about camels?\n    - what's your favorite animal in Egypt?\n    - do you like camels?\n    - can you tell me a joke about the Nile?\n    - what's your favorite river?\n    - do you like rivers?\n    - can you tell me a joke about the desert?\n    - what's your favorite desert?\n    - do you like deserts?\n    - can you tell me a joke about the Red Sea?\n    - what's your favorite sea?\n    - do you like the sea?\n    - can you tell me a joke about the Mediterranean?\n    - what's your favorite beach?\n    - do you like beaches?\n    - can you tell me a joke about sand?\n    - what's your favorite sand color?\n    - do you like sand?\n- intent: request_trip\n  examples: |\n    - I want to plan a trip\n    - I need help planning a trip\n    - I want to go on a trip\n    - I'm planning a [7-day](duration) trip to Egypt arriving on [15th October](arrival_date). I prefer [sunny](weather_preference) weather and have a budget of [$2000](budget). I want a hotel with a [pool](hotel_features) and [spa](hotel_features), and I'd like to take a [Nile cruise](landmarks_activities). I'm traveling with my [family](family_status).\n    - I want a [10-day](duration) trip to Egypt with a budget of [$5000](budget). I prefer [cool](weather_preference) weather and want to stay in a [beachfront](hotel_features) hotel. I'd like to explore [historical landmarks](landmarks_activities) and relax by the [Nile](landmarks_activities). I'm a [solo traveler](family_status).\n    - I'm coming to Egypt for [5 days](duration) arriving on [20th December](arrival_date). I like [warm](weather_preference) weather and have a budget of [$1500](budget). I need a [family-friendly](hotel_features) hotel and want to visit [museums](landmarks_activities). I'm traveling with my [family](family_status).\n    - I'm planning a [2-week](duration) trip to Egypt arriving on [1st November](arrival_date). I prefer [cool](weather_preference) weather and have a budget of [$3000](budget). I want a hotel with a [gym](hotel_features) and [restaurant](hotel_features), and I'd like to take a [desert safari](landmarks_activities). I'm traveling with my [friends](family_status).\n    - I want a [5-day](duration) trip to Egypt with a budget of [$2000](budget). I prefer [warm](weather_preference) weather and want to stay in a [luxury](hotel_features) hotel. I'd like to explore [museums](landmarks_activities) and relax by the [Red Sea](landmarks_activities). I'm a [solo traveler](family_status).\n    - I'm coming to Egypt for [10 days](duration) arriving on [5th January](arrival_date). I like [hot](weather_preference) weather and have a budget of [$5000](budget). I need a [pet-friendly](hotel_features) hotel and want to visit [temples](landmarks_activities). I'm traveling with my [spouse](family_status).\n    - I'm planning a [3-week](duration) trip to Egypt arriving on [10th February](arrival_date). I prefer [mild](weather_preference) weather and have a budget of [$4000](budget). I want a hotel with a [bar](hotel_features) and [wifi](hotel_features), and I'd like to take a [camel ride](landmarks_activities). I'm traveling with my [kids](family_status).\n    - I want a [1-week](duration) trip to Egypt with a budget of [$1000](budget). I prefer [cold](weather_preference) weather and want to stay in a [budget](hotel_features) hotel. I'd like to explore [markets](landmarks_activities) and relax by the [Mediterranean Sea](landmarks_activities). I'm a [solo traveler](family_status).\n    - I'm planning a [4-day](duration) trip to Egypt arriving on [25th March](arrival_date). I prefer [warm](weather_preference) weather and have a budget of [$1200](budget). I want a hotel with a [gym](hotel_features) and [restaurant](hotel_features), and I'd like to take a [desert safari](landmarks_activities). I'm traveling with my [friends](family_status).\n    - I want to make a trip\n    - I want to plan a vacation\n    - Can you help me organize a trip?\n    - Help me book a trip to Egypt\n    - I want to arrange a holiday\n    - I need a travel plan for Egypt\n    - Can you suggest a travel itinerary?\n    - I want to visit Egypt for a week\n    - Help me set up a travel schedule\n    - I want to experience Egypt as a tourist\n    - I want to explore Egypt for [10 days](duration)\n    - I want to travel to Egypt with my [family](family_status)\n    - I want to go on a solo adventure in Egypt\n    - I want to book a trip for [next month](arrival_date)\n    - I want to see the main attractions in Egypt\n    - I want to visit historical sites in Egypt\n    - I want to relax by the [Red Sea](landmarks_activities)\n    - I want to go on a Nile cruise\n    - I want to visit pyramids and temples\n    - I want to go on a desert safari\n    - I want to visit museums in Egypt\n    - I want to go sightseeing in Egypt\n    - I want to go on a family trip to Egypt\n    - I want to go on a honeymoon in Egypt\n    - I want to go on a group tour in Egypt\n    - I want to go on a luxury trip to Egypt\n    - I want to go on a budget trip to Egypt\n    - I want to go on an adventure trip to Egypt\n    - I want to go on a cultural trip to Egypt\n    - I want to go on a historical trip to Egypt\n    - I want to go on a relaxing trip to Egypt\n    - I want to go on a sightseeing trip to Egypt\n    - I want to go on a nature trip to Egypt\n    - I want to go on a beach trip to Egypt\n    - I want to go on a city tour in Egypt\n    - I want to go on a food tour in Egypt\n    - I want to go on a shopping trip to Egypt\n    - I want to go on a festival trip to Egypt\n    - I want to go on a spiritual trip to Egypt\n    - I want to go on a wellness trip to Egypt\n    - I want to go on a sports trip to Egypt\n    - I want to go on a photography trip to Egypt\n    - I want to go on a wildlife trip to Egypt\n    - I want to go on a cruise in Egypt\n    - I want to go on a hiking trip in Egypt\n    - I want to go on a biking trip in Egypt\n    - I want to go on a diving trip in Egypt\n    - I want to go on a snorkeling trip in Egypt\n    - I want to go on a windsurfing trip in Egypt\n    - I want to go on a kitesurfing trip in Egypt\n    - I want to go on a sailing trip in Egypt\n    - I want to go on a fishing trip in Egypt\n    - I want to go on a golf trip in Egypt\n    - I want to go on a spa trip in Egypt\n    - I want to go on a yoga trip in Egypt\n    - I want to go on a meditation trip in Egypt\n    - I want to go on a wellness retreat in Egypt\n    - I want to go on a desert adventure in Egypt\n    - I want to go on a mountain trip in Egypt\n    - I want to go on a river trip in Egypt\n    - I want to go on a lake trip in Egypt\n    - I want to go on an island trip in Egypt\n    - I want to go on a cultural festival in Egypt\n    - I want to go on a music festival in Egypt\n    - I want to go on a film festival in Egypt\n    - I want to go on an art festival in Egypt\n    - I want to go on a food festival in Egypt\n    - I want to go on a shopping festival in Egypt\n    - I want to go on a sports festival in Egypt\n    - I want to go on a religious festival in Egypt\n    - I want to go on a traditional festival in Egypt\n    - I want to go on a modern festival in Egypt\n    - I want to go on a local festival in Egypt\n    - I want to go on a national festival in Egypt\n    - I want to go on an international festival in Egypt\n    - I want to go on a unique festival in Egypt\n    - I want to go on a special festival in Egypt\n    - I want to go on a famous festival in Egypt\n    - I want to go on a popular festival in Egypt\n    - I want to go on a big festival in Egypt\n    - I want to go on a small festival in Egypt\n    - I want to go on a quiet festival in Egypt\n    - I want to go on a lively festival in Egypt\n    - I want to go on a peaceful festival in Egypt\n    - I want to go on an exciting festival in Egypt\n    - I want to go on a relaxing festival in Egypt\n    - I want to go on a fun festival in Egypt\n    - I want to go on an interesting festival in Egypt\n    - I want to go on a memorable festival in Egypt\n    - I want to go on an unforgettable festival in Egypt\n    - I want to go on a once-in-a-lifetime festival in Egypt\n- intent: share_state\n  examples: |\n    - [Luxor](state)\n    - [Cairo](state)\n    - [Alexandria](state)\n    - [Aswan](state)\n    - I'm traveling to [Luxor](state)\n    - I'm going to [Cairo](state)\n    - I'm visiting [Alexandria](state)\n    - I'm planning a trip to [Aswan](state)\n    - I'm going to [Hurghada](state)\n    - I'm visiting [Sharm El Sheikh](state)\n    - I'm planning a trip to [Dahab](state)\n    - I'm going to [Marsa Alam](state)\n    - I'm visiting [El Gouna](state)\n    - I'm planning a trip to [Siwa Oasis](state)\n    - [luxor] {\"entity\": \"state\", \"value\": \"Luxor\"}\n    - [cairo] {\"entity\": \"state\", \"value\": \"Cairo\"}\n    - [alexandria] {\"entity\": \"state\", \"value\": \"Alexandria\"}\n    - [aswan] {\"entity\": \"state\", \"value\": \"Aswan\"}\n    - [hurghada] {\"entity\": \"state\", \"value\": \"Hurghada\"}\n    - [sharm el sheikh] {\"entity\": \"state\", \"value\": \"Sharm El Sheikh\"}\n    - [dahab] {\"entity\": \"state\", \"value\": \"Dahab\"}\n    - [marsaalam] {\"entity\": \"state\", \"value\": \"Marsa Alam\"}\n    - [el gouna] {\"entity\": \"state\", \"value\": \"El Gouna\"}\n    - [siwa oasis] {\"entity\": \"state\", \"value\": \"Siwa Oasis\"}\n    - [alex] {\"entity\": \"state\", \"value\": \"Alexandria\"}\n    - [Alex] {\"entity\": \"state\", \"value\": \"Alexandria\"}\n    - [luxor] {\"entity\": \"state\", \"value\": \"Luxor\"}\n    - I want to visit [Luxor](state)\n    - Take me to [Cairo](state)\n    - My destination is [Alexandria](state)\n    - I want to explore [Aswan](state)\n    - Let's go to [Hurghada](state)\n    - Show me [Sharm El Sheikh](state)\n    - I want to see [Dahab](state)\n    - Book me a trip to [Marsa Alam](state)\n    - I want to stay in [El Gouna](state)\n    - Plan my trip to [Siwa Oasis](state)\n    - [Cairo](state) is my choice\n    - [Luxor](state) is my destination\n    - [Alexandria](state) is where I want to go\n    - [Aswan](state) is my preferred city\n    - [Hurghada](state) is my travel spot\n    - [Sharm El Sheikh](state) is my vacation place\n    - [Dahab](state) is my pick\n    - [Marsa Alam](state) is my favorite\n    - [El Gouna](state) is my selection\n    - [Siwa Oasis](state) is my option\n    - I want to travel to [Cairo](state)\n    - I want to go to [Luxor](state)\n    - I want to visit [Alexandria](state)\n    - I want to see [Aswan](state)\n    - I want to explore [Hurghada](state)\n    - I want to discover [Sharm El Sheikh](state)\n    - I want to check out [Dahab](state)\n    - I want to experience [Marsa Alam](state)\n    - I want to enjoy [El Gouna](state)\n    - I want to relax in [Siwa Oasis](state)\n    - My trip is to [Cairo](state)\n    - My journey is to [Luxor](state)\n    - My vacation is in [Alexandria](state)\n    - My holiday is in [Aswan](state)\n    - My adventure is in [Hurghada](state)\n    - My getaway is in [Sharm El Sheikh](state)\n    - My escape is in [Dahab](state)\n    - My retreat is in [Marsa Alam](state)\n    - My break is in [El Gouna](state)\n    - My excursion is in [Siwa Oasis](state)\n\n- intent: share_budget\n  examples: |\n    - my budget is about [1500$](budget)\n    - My budget is [$1000](budget)\n    - I have [$5000](budget) for the trip\n    - I can spend up to [$2000](budget)\n    - My budget is around [$3000](budget)\n    - My budget is [$2000](budget)\n    - I have [$1000](budget) for the trip\n    - I can spend up to [$5000](budget)\n    - My budget is around [$4000](budget)\n    - I'm willing to spend [$3000](budget)\n    - I have a budget of [$1500](budget)\n    - My budget is [$2500](budget)\n    - I can afford up to [$3500](budget)\n    - I'm planning to spend [$4500](budget)\n    - My budget is [$6000](budget)\n    - I have a budget of [$7000](budget)\n    - I can spend up to [$8000](budget)\n    - My budget is around [$9000](budget)\n    - I'm willing to spend [$1000](budget)\n    - My budget is [1000$](budget)\n    - I have [5000$](budget) for the trip\n    - I can spend up to [2000$](budget)\n    - My budget is around [3000$](budget)\n    - My budget is [2000$](budget)\n    - I have [1000$](budget) for the trip\n    - I can spend up to [5000$](budget)\n    - My budget is around [4000$](budget)\n    - I'm willing to spend [3000$](budget)\n    - I have a budget of [1500$](budget)\n    - My budget is [2500$](budget)\n    - I can afford up to [43500$](budget)\n    - I'm planning to spend [4500$](budget)\n    - My budget is [6000$](budget)\n    - I have a budget of [7000$](budget)\n    - I can spend up to [8000$](budget)\n    - My budget is around [9000$](budget)\n    - I'm willing to spend [10000$](budget)\n    - My budget is [1100](budget)\n    - I have a budget of [1200](budget)\n    - I can spend up to [1300](budget)\n    - I'm willing to spend [3000](budget)\n    - I have a budget of [1500](budget)\n    - My budget is [2500](budget)\n    - I can afford up to [3500](budget)\n    - I'm planning to spend [4500](budget)\n    - My budget is [600](budget)\n    - I have a budget of [700](budget)\n    - I can spend up to [800](budget)\n    - My budget is around [900](budget)\n    - I'm willing to spend [1000](budget)\n    - [150$](budget)\n    - [$250](budget)\n    - [200$](budget)\n    - [300$](budget)\n    - [500$](budget)\n    - [1000$](budget)\n    - [$1500](budget)\n    - [$2000](budget)\n    - [1000](budget)\n    - [5000](budget)\n    - [2000](budget)\n    - [3000](budget)\n    - [250](budget)\n    - [100](budget)\n    - I have [one thousand dollars](budget) for the trip\n    - My budget is [two thousand dollars](budget)\n    - I can spend up to [five thousand dollar](budget)\n    - I have [three thousand usd](budget) for expenses\n    - Planning with [four thousand USD](budget)\n    - Around [six thousand dollar](budget) budget\n    - I'm looking at [seven thousand USD](budget)\n    - Budget of [eight thousand usd](budget)\n    - Approximately [ten thousand dollars](budget)\n    - I have [fifteen hundred dollars](budget)\n    - About [twenty five hundred usd](budget)\n    - Budget near [thirty five hundred USD](budget)\n    - Around [forty five hundred dollars](budget)\n    - Roughly [fifty thousand USD](budget)\n    - [five hundred dollars](budget)\n    - [500](budget)$\n    - My maximum budget is [3000](budget)\n    - I don't want to spend more than [2000](budget)\n    - My spending limit is [1500](budget)\n    - I want to keep my expenses under [2500](budget)\n    - I have a tight budget of [1000](budget)\n    - My budget is flexible, but around [4000](budget)\n    - I can go up to [3500](budget) if needed\n    - My budget range is [2000](budget) to [3000](budget)\n    - I want the cheapest options, under [1000](budget)\n    - I want a luxury experience, budget is [10000](budget)\n    - I want to splurge, budget is [15000](budget)\n    - I want to save money, budget is [800](budget)\n    - My budget is not fixed, but around [2500](budget)\n    - I want to spend as little as possible, under [500](budget)\n    - I want to go all out, budget is [20000](budget)\n    - My budget is whatever it takes for the best experience\n    - I want to travel on a shoestring, budget is [600](budget)\n    - I want to travel first class, budget is [12000](budget)\n    - I want to travel in style, budget is [9000](budget)\n    - I want to travel comfortably, budget is [4000](budget)\n    - I want to travel affordably, budget is [1500](budget)\n    - I want to travel luxuriously, budget is [20000](budget)\n    - I want to travel economically, budget is [1000](budget)\n    - I want to travel extravagantly, budget is [25000](budget)\n    - I want to travel modestly, budget is [1200](budget)\n    - I want to travel lavishly, budget is [18000](budget)\n    - I want to travel frugally, budget is [700](budget)\n    - I want to travel generously, budget is [5000](budget)\n    - I want to travel prudently, budget is [1300](budget)\n    - I want to travel sensibly, budget is [1400](budget)\n    - I want to travel wisely, budget is [1600](budget)\n    - I want to travel cautiously, budget is [1100](budget)\n    - I want to travel carefully, budget is [1200](budget)\n    - I want to travel thoughtfully, budget is [1700](budget)\n    - I want to travel judiciously, budget is [1800](budget)\n    - I want to travel shrewdly, budget is [1900](budget)\n    - I want to travel astutely, budget is [2000](budget)\n    - I want to travel cleverly, budget is [2100](budget)\n    - I want to travel resourcefully, budget is [2200](budget)\n    - I want to travel smartly, budget is [2300](budget)\n    - I want to travel efficiently, budget is [2400](budget)\n- intent: share_hotel_features\n  examples: |\n    - I want a hotel with a [pool](hotel_features)\n    - I'd like a [spa](hotel_features) in the hotel\n    - I prefer a [beachfront](hotel_features) hotel\n    - I need a [family-friendly](hotel_features) hotel\n    - I want a hotel with a [gym](hotel_features)\n    - I'd like a [restaurant](hotel_features) in the hotel\n    - I prefer a [luxury](hotel_features) hotel\n    - I need a [pet-friendly](hotel_features) hotel\n    - I want a hotel with [wifi](hotel_features)\n    - I'd like a [bar](hotel_features) in the hotel\n    - I prefer a [budget](hotel_features) hotel\n    - I need a [boutique](hotel_features) hotel\n    - I want a hotel with a [garden](hotel_features)\n    - I'd like a [rooftop](hotel_features) in the hotel\n    - I prefer a [business](hotel_features) hotel\n    - I need a [resort](hotel_features) hotel\n    - I want a hotel with a [sea view](hotel_features)\n    - I'd like a [suite](hotel_features) in the hotel\n    - I prefer a [historic](hotel_features) hotel\n    - I need a [modern](hotel_features) hotel\n    - I want a hotel with a [balcony](hotel_features)\n    - I'd like a [beach_view](hotel_features) hotel\n    - I prefer a [city_center](hotel_features) hotel\n    - I'd like a [beach view](hotel_features) hotel\n    - I prefer a [city center](hotel_features) hotel\n    - I need a [beach_view](hotel_features) hotel\n    - I want a hotel with a [city_center](hotel_features)\n    - i want a [sea view](hotel_features) hotel\n    - i want a [sea_view](hotel_features) hotel\n    - i want the hotel to have a [sea view](hotel_features)\n    - i want the hotel to be in the [city center](hotel_features)\n    - I want a hotel with a [private beach](hotel_features)\n    - I want a hotel with [free breakfast](hotel_features)\n    - I want a hotel with [parking](hotel_features)\n    - I want a hotel with [airport shuttle](hotel_features)\n    - I want a hotel with [room service](hotel_features)\n    - I want a hotel with [conference rooms](hotel_features)\n    - I want a hotel with [kids club](hotel_features)\n    - I want a hotel with [pet services](hotel_features)\n    - I want a hotel with [laundry service](hotel_features)\n    - I want a hotel with [spa treatments](hotel_features)\n    - I want a hotel with [fitness center](hotel_features)\n    - I want a hotel with [jacuzzi](hotel_features)\n    - I want a hotel with [tennis courts](hotel_features)\n    - I want a hotel with [golf course](hotel_features)\n    - I want a hotel with [casino](hotel_features)\n    - I want a hotel with [nightclub](hotel_features)\n    - I want a hotel with [live entertainment](hotel_features)\n    - I want a hotel with [all-inclusive](hotel_features)\n    - I want a hotel with [adults only](hotel_features)\n    - I want a hotel with [family rooms](hotel_features)\n    - I want a hotel with [connecting rooms](hotel_features)\n    - I want a hotel with [kitchenette](hotel_features)\n    - I want a hotel with [minibar](hotel_features)\n    - I want a hotel with [coffee maker](hotel_features)\n    - I want a hotel with [air conditioning](hotel_features)\n    - I want a hotel with [heating](hotel_features)\n    - I want a hotel with [soundproof rooms](hotel_features)\n    - I want a hotel with [non-smoking rooms](hotel_features)\n    - I want a hotel with [smoking rooms](hotel_features)\n    - I want a hotel with [accessible rooms](hotel_features)\n    - I want a hotel with [elevator](hotel_features)\n    - I want a hotel with [pet accommodation](hotel_features)\n    - I want a hotel with [childcare](hotel_features)\n    - I want a hotel with [babysitting](hotel_features)\n    - I want a hotel with [playground](hotel_features)\n    - I want a hotel with [bicycle rental](hotel_features)\n    - I want a hotel with [car rental](hotel_features)\n    - I want a hotel with [tour desk](hotel_features)\n    - I want a hotel with [concierge](hotel_features)\n    - I want a hotel with [luggage storage](hotel_features)\n    - I want a hotel with [safe](hotel_features)\n    - I want a hotel with [ATM](hotel_features)\n    - I want a hotel with [currency exchange](hotel_features)\n    - I want a hotel with [gift shop](hotel_features)\n    - I want a hotel with [beauty salon](hotel_features)\n    - I want a hotel with [barber shop](hotel_features)\n    - I want a hotel with [library](hotel_features)\n    - I want a hotel with [fireplace](hotel_features)\n    - I want a hotel with [terrace](hotel_features)\n    - I want a hotel with [garden view](hotel_features)\n    - I want a hotel with [mountain view](hotel_features)\n    - I want a hotel with [city view](hotel_features)\n    - I want a hotel with [river view](hotel_features)\n    - I want a hotel with [lake view](hotel_features)\n    - I want a hotel with [pool view](hotel_features)\n    - I want a hotel with [ocean view](hotel_features)\n    - I want a hotel with [valet parking](hotel_features)\n    - I want a hotel with [shuttle service](hotel_features)\n    - I want a hotel with [wedding services](hotel_features)\n    - I want a hotel with [banquet facilities](hotel_features)\n    - I want a hotel with [meeting rooms](hotel_features)\n    - I want a hotel with [business center](hotel_features)\n    - I want a hotel with [express check-in](hotel_features)\n    - I want a hotel with [express check-out](hotel_features)\n    - I want a hotel with [wake-up service](hotel_features)\n    - I want a hotel with [newspaper](hotel_features)\n    - I want a hotel with [daily housekeeping](hotel_features)\n    - I want a hotel with [ironing service](hotel_features)\n    - I want a hotel with [dry cleaning](hotel_features)\n    - I want a hotel with [shoe shine](hotel_features)\n    - I want a hotel with [bridal suite](hotel_features)\n    - I want a hotel with [VIP room facilities](hotel_features)\n    - I want a hotel with [shared lounge](hotel_features)\n    - I want a hotel with [TV area](hotel_features)\n    - I want a hotel with [private check-in](hotel_features)\n    - I want a hotel with [private check-out](hotel_features)\n    - I want a hotel with [personal trainer](hotel_features)\n    - I want a hotel with [massage](hotel_features)\n    - I want a hotel with [sauna](hotel_features)\n    - I want a hotel with [steam room](hotel_features)\n    - I want a hotel with [hot tub](hotel_features)\n    - I want a hotel with [solarium](hotel_features)\n    - I want a hotel with [sun terrace](hotel_features)\n    - I want a hotel with [pool bar](hotel_features)\n    - I want a hotel with [snack bar](hotel_features)\n    - I want a hotel with [BBQ facilities](hotel_features)\n    - I want a hotel with [picnic area](hotel_features)\n    - I want a hotel with [outdoor pool](hotel_features)\n    - I want a hotel with [indoor pool](hotel_features)\n    - I want a hotel with [children's pool](hotel_features)\n    - I want a hotel with [water park](hotel_features)\n    - I want a hotel with [waterslide](hotel_features)\n    - I want a hotel with [pool toys](hotel_features)\n    - I want a hotel with [pool towels](hotel_features)\n    - I want a hotel with [poolside bar](hotel_features)\n    - I want a hotel with [swim-up bar](hotel_features)\n    - I want a hotel with [heated pool](hotel_features)\n    - I want a hotel with [saltwater pool](hotel_features)\n    - I want a hotel with [infinity pool](hotel_features)\n    - I want a hotel with [plunge pool](hotel_features)\n    - I want a hotel with [rooftop pool](hotel_features)\n    - I want a hotel with [lap pool](hotel_features)\n    - I want a hotel with [wave pool](hotel_features)\n    - I want a hotel with [lazy river](hotel_features)\n    - I want a hotel with [pool bar](hotel_features)\n    - I want a hotel with [poolside cabana](hotel_features)\n    - I want a hotel with [poolside lounge](hotel_features)\n    - I want a hotel with [poolside restaurant](hotel_features)\n    - I want a hotel with [poolside grill](hotel_features)\n    - I want a hotel with [poolside snack bar](hotel_features)\n    - I want a hotel with [poolside service](hotel_features)\n    - I want a hotel with [poolside waiter](hotel_features)\n    - I want a hotel with [poolside bartender](hotel_features)\n    - I want a hotel with [poolside DJ](hotel_features)\n    - I want a hotel with [poolside music](hotel_features)\n    - I want a hotel with [poolside entertainment](hotel_features)\n    - I want a hotel with [poolside games](hotel_features)\n    - I want a hotel with [poolside activities](hotel_features)\n- intent: share_landmarks_activities\n  examples: |\n    - I want to explore [historical landmarks](landmarks_activities)\n    - I want to see [Eiffel Tower](landmarks_activities)\n    - I'm interested in [Alexandria library](landmarks_activities)\n    - I'd like to take a [cruise](landmarks_activities)\n    - I'm interested in [desert safaris](landmarks_activities)\n    - I'd like to visit [museums](landmarks_activities)\n    - I want to explore [markets](landmarks_activities)\n    - I'm interested in [beaches](landmarks_activities)\n    - I'd like to see [historical sites](landmarks_activities)\n    - I'd like [diving](landmarks_activities)\n    - I'd like to see [temples](landmarks_activities)\n    - I want to visit [gardens](landmarks_activities)\n    - I'm interested in [parks](landmarks_activities)\n    - I'd like to take a [hiking trip](landmarks_activities)\n    - I want to explore [cultural sites](landmarks_activities)\n    - I'm interested in [wildlife reserves](landmarks_activities)\n    - I'd like to see [waterfalls](landmarks_activities)\n    - I want to visit [mountains](landmarks_activities)\n    - I'm interested in [lakes](landmarks_activities)\n    - I'd like to take a [boat ride](landmarks_activities)\n    - I want to explore [forests](landmarks_activities)\n    - I'm interested in [rivers](landmarks_activities)\n    - I'd like to see [caves](landmarks_activities)\n    - I want to visit [islands](landmarks_activities)\n    - i am like to see [museums](landmarks_activities) and [temples](landmarks_activities)\n    - I want to visit [opera houses](landmarks_activities)\n    - I'm interested in [ski resorts](landmarks_activities)\n    - I'd like to see [volcanoes](landmarks_activities)\n    - I want to visit [rainforests](landmarks_activities)\n    - I'm interested in [theme parks](landmarks_activities)\n    - I'd like to see [castles](landmarks_activities)\n    - I want to visit [glaciers](landmarks_activities)\n    - I'm interested in [coral reefs](landmarks_activities)\n    - I'd like to see [hot springs](landmarks_activities)\n    - I want to visit [vineyards](landmarks_activities)\n    - I'm interested in [amusement parks](landmarks_activities)\n    - I'd like to see [ice hotels](landmarks_activities)\n    - I want to visit [tulip fields](landmarks_activities)\n    - I'm interested in [northern lights](landmarks_activities)\n    - I'd like to see [fjords](landmarks_activities)\n    - I want to visit [rainbow mountains](landmarks_activities)\n    - I'm interested in [cherry blossom festivals](landmarks_activities)\n    - I'd like to see [kangaroos](landmarks_activities)\n    - I want to visit [koala sanctuaries](landmarks_activities)\n    - I'm interested in [ice caves](landmarks_activities)\n    - I'd like to see [penguin colonies](landmarks_activities)\n    - I want to visit [tropical islands](landmarks_activities)\n    - I'm interested in [geysers](landmarks_activities)\n    - I'd like to see [rainbow lakes](landmarks_activities)\n    - I want to visit [giant sequoia trees](landmarks_activities)\n    - I'm interested in [bamboo forests](landmarks_activities)\n    - I'd like to see [coral atolls](landmarks_activities)\n    - I want to visit [icebergs](landmarks_activities)\n    - I'm interested in [polar bear watching](landmarks_activities)\n    - I'd like to see [aurora borealis](landmarks_activities)\n    - I want to see the [Pyramids of Giza](landmarks_activities)\n    - I'd like to visit the [Sphinx](landmarks_activities)\n    - I want to explore the [Egyptian Museum](landmarks_activities)\n    - Take me to [Karnak Temple](landmarks_activities)\n    - I want to visit the [Valley of the Kings](landmarks_activities)\n    - Show me [Abu Simbel](landmarks_activities)\n    - I want to go snorkeling in the [Red Sea](landmarks_activities)\n    - I want to ride a [felucca on the Nile](landmarks_activities)\n    - Take me sandboarding in the [White Desert](landmarks_activities)\n    - I want to go [camel riding](landmarks_activities)\n    - Let's try [quad biking in the desert](landmarks_activities)\n    - I want to visit [Philae Temple](landmarks_activities)\n    - Show me [Siwa Oasis](landmarks_activities)\n    - I want to see [Ras Mohammed National Park](landmarks_activities)\n    - Take me to [St. Catherine's Monastery](landmarks_activities)\n    - I want to go [bird watching in Lake Qarun](landmarks_activities)\n    - I'd like to visit [Al-Azhar Mosque](landmarks_activities)\n    - I want to see the [Citadel of Saladin](landmarks_activities)\n    - Take me to [Islamic Cairo](landmarks_activities)\n    - I want to visit [Luxor Temple](landmarks_activities)\n    - Show me [Kom Ombo Temple](landmarks_activities)\n    - I want to see [Edfu Temple](landmarks_activities)\n    - Take me to [Dendera Temple](landmarks_activities)\n    - I want to visit [Abydos Temple](landmarks_activities)\n    - Show me [Montaza Palace](landmarks_activities)\n    - I want to see [Qaitbay Citadel](landmarks_activities)\n    - Take me to [El Alamein War Museum](landmarks_activities)\n    - I want to visit [Wadi El Rayan waterfalls](landmarks_activities)\n    - Show me [Fayoum's Magic Lake](landmarks_activities)\n    - I want to see [Colored Canyon in Sinai](landmarks_activities)\n    - Take me to [Blue Hole in Dahab](landmarks_activities)\n    - I want to visit [Taba Heights](landmarks_activities)\n    - Show me [Ain Sokhna beaches](landmarks_activities)\n    - I want to see [Al-Muizz Street](landmarks_activities)\n    - Take me to [Khan El Khalili bazaar](landmarks_activities)\n    - I want to visit [Wadi El Hitan (Valley of the Whales)](landmarks_activities)\n    - Show me [Baron Empain Palace](landmarks_activities)\n    - I want to see [Manial Palace](landmarks_activities)\n    - Take me to [Gayer-Anderson Museum](landmarks_activities)\n    - I want to visit [Coptic Cairo](landmarks_activities)\n    - Show me [Saint Simon Monastery (Cave Church)](landmarks_activities)\n    - I want to see [El Gouna Marina](landmarks_activities)\n    - Take me to [Aswan Botanical Garden](landmarks_activities)\n    - I want to visit [Nubian Village in Aswan](landmarks_activities)\n    - Show me [Temple of Hatshepsut](landmarks_activities)\n    - I want to see [Temple of Medinet Habu](landmarks_activities)\n    - Take me to [Temple of Esna](landmarks_activities)\n    - I want to visit [Temple of Kalabsha](landmarks_activities)\n    - Show me [Temple of Kom Ombo](landmarks_activities)\n    - I want to see [Temple of Edfu](landmarks_activities)\n    - [local culture] (landmarks_activities) and [cuisine](landmarks_activities)\n- intent: share_duration\n  examples: |\n    - I'm planning a [7-day](duration) trip\n    - My trip will be [2 weeks](duration) long\n    - I'll stay for [10 days](duration)\n    - It's a [5-day](duration) trip\n    - I'm planning a [2-week](duration) trip\n    - My trip will be [3 weeks](duration) long\n    - I'll stay for [1 month](duration)\n    - It's a [10-day](duration) trip\n    - I'm planning a [4-day](duration) trip\n    - My trip will be [1 week](duration) long\n    - I'll stay for [2 months](duration)\n    - It's a [6-day](duration) trip\n    - I'm planning a [5-week](duration) trip\n    - My trip will be [2 days](duration) long\n    - I'll stay for [3 months](duration)\n    - It's a [7-day](duration) trip\n    - I'm planning a [8-day](duration) trip\n    - My trip will be [9 days](duration) long\n    - I'll stay for [10 weeks](duration)\n    - i will spend [1 week](duration)\n    - i plan to stay for [2 weeks](duration)\n    - i plan to spend [3 days](duration)\n    - [10 days](duration)\n    - [2 weeks](duration)\n    - [1 week](duration)\n    - [1 month](duration)\n    - [3 months](duration)\n    - I'll stay for [three weeks](duration)\n    - I'm planning a [two-week](duration) trip\n    - It's a [one-week](duration) trip\n    - I want to stay for [four days](duration)\n    - My trip will be [five days](duration) long\n    - I'm staying for [seven days](duration)\n    - Planning a [six-day](duration) trip\n    - It's going to be [eight days](duration)\n    - A [three-day](duration) trip\n    - I'll be there for [two months](duration)\n    - Planning to stay [one month](duration)\n    - I'll stay for [three months](duration)\n    - A [four-week](duration) vacation\n    - [seven days](duration)\n    - [two months](duration)\n    - [three hours](duration)\n    - [one hour](duration)\n    - [1 hour](duration)\n    - [2 hours](duration)\n    - [3 hours](duration)\n    - [3 days](duration)\n    - Just a [weekend](duration)\n    - Only [one night](duration)\n    - For [a few days](duration)\n    - For [the whole summer](duration)\n    - For [the winter break](duration)\n    - For [a couple of weeks](duration)\n    - For [half a year](duration)\n    - For [a semester](duration)\n    - For [a year](duration)\n    - For [a short trip](duration)\n    - For [a long vacation](duration)\n    - For [a quick getaway](duration)\n    - For [an extended stay](duration)\n    - For [a day trip](duration)\n    - For [a few hours](duration)\n    - For [the whole month](duration)\n    - For [the entire week](duration)\n    - For [the next two weeks](duration)\n    - For [the next three days](duration)\n    - For [the next weekend](duration)\n    - For [the next holiday](duration)\n    - For [the next break](duration)\n    - For [the next vacation](duration)\n    - For [the next season](duration)\n    - For [the next year](duration)\n    - For [the next quarter](duration)\n    - For [the next semester](duration)\n    - For [the next month](duration)\n    - For [the next day](duration)\n    - For [the next hour](duration)\n    - For [a fortnight](duration)\n    - For [a couple of days](duration)\n    - For [several weeks](duration)\n    - For [several months](duration)\n    - For [a few weekends](duration)\n    - For [a few nights](duration)\n    - For [a few months](duration)\n    - For [a few weeks](duration)\n    - For [a few semesters](duration)\n    - For [a few years](duration)\n    - For [a few quarters](duration)\n    - For [a few holidays](duration)\n    - For [a few breaks](duration)\n    - For [a few vacations](duration)\n    - For [a few seasons](duration)\n    - For [a few day trips](duration)\n    - For [a few getaways](duration)\n    - For [a few extended stays](duration)\n    - For [a few short trips](duration)\n    - For [a few long vacations](duration)\n    - For [a few quick getaways](duration)\n    - For [a few extended vacations](duration)\n    - For [a few long stays](duration)\n    - For [a few short stays](duration)\n    - For [a few overnight trips](duration)\n    - For [a few weekend trips](duration)\n    - For [a few week-long trips](duration)\n    - For [a few month-long trips](duration)\n    - For [a few year-long trips](duration)\n    - For [a few semester-long trips](duration)\n    - For [a few quarter-long trips](duration)\n    - For [a few season-long trips](duration)\n    - For [a few holiday trips](duration)\n    - For [a few break trips](duration)\n    - For [a few vacation trips](duration)\n    - For [a few season trips](duration)\n    - For [a few day trips](duration)\n    - For [a few getaways](duration)\n    - For [a few extended stays](duration)\n    - For [a few short trips](duration)\n    - For [a few long vacations](duration)\n    - For [a few quick getaways](duration)\n    - For [a few extended vacations](duration)\n    - For [a few long stays](duration)\n    - For [a few short stays](duration)\n    - For [a few overnight trips](duration)\n    - For [a few weekend trips](duration)\n    - For [a few week-long trips](duration)\n    - For [a few month-long trips](duration)\n    - For [a few year-long trips](duration)\n    - For [a few semester-long trips](duration)\n    - For [a few quarter-long trips](duration)\n    - For [a few season-long trips](duration)\n    - For [a few holiday trips](duration)\n    - For [a few break trips](duration)\n    - For [a few vacation trips](duration)\n    - For [a few season trips](duration)\n- intent: share_arrival_date\n  examples: |\n    - i plan to have a trip in the [next week] (arrival_date)\n    - I'll arrive on [15th October](arrival_date)\n    - My trip starts [next month](arrival_date)\n    - I'm coming in [December](arrival_date)\n    - I'll be there in [summer](arrival_date)\n    - I'll arrive on [1st January](arrival_date)\n    - My trip starts [next week](arrival_date)\n    - I'm coming in [March](arrival_date)\n    - I'll be there in [spring](arrival_date)\n    - I'll arrive on [20th February](arrival_date)\n    - My trip starts [next year](arrival_date)\n    - I'm coming in [April](arrival_date)\n    - I'll be there in [autumn](arrival_date)\n    - I'll arrive on [5th May](arrival_date)\n    - My trip starts [next season](arrival_date)\n    - I'm coming in [June](arrival_date)\n    - I'll be there in [winter](arrival_date)\n    - I'll arrive on [10th July](arrival_date)\n    - My trip starts [next quarter](arrival_date)\n    - I'm coming in [August](arrival_date)\n    - [next month](arrival_date)\n    - [next week](arrival_date)\n    - I'll arrive [as soon as possible](arrival_date)\n    - I want to travel [after Ramadan](arrival_date)\n    - I plan to visit [when school is out](arrival_date)\n    - I want to go [in a couple of months](arrival_date)\n    - Let's plan for [next Eid](arrival_date)\n    - I want to travel [after the exams](arrival_date)\n    - I want to visit [during the holidays](arrival_date)\n    - I want to go [in the fall](arrival_date)\n    - I want to travel [in the spring break](arrival_date)\n    - I want to visit [in a few weeks](arrival_date)\n    - I want to go [in a few days](arrival_date)\n    - I want to travel [in the next available slot](arrival_date)\n    - I want to visit [when flights are cheapest](arrival_date)\n    - I want to go [when the weather is nice](arrival_date)\n    - I want to travel [after my birthday](arrival_date)\n    - I want to visit [before the end of the year](arrival_date)\n    - I want to go [at the start of the year](arrival_date)\n    - I want to travel [in the new year](arrival_date)\n    - I want to visit [in the next school break](arrival_date)\n    - I want to go [in the next public holiday](arrival_date)\n    - I want to travel [in the next festival season](arrival_date)\n    - I want to visit [in the next long weekend](arrival_date)\n    - I want to go [in the next vacation period](arrival_date)\n    - I want to travel [in the next available holiday](arrival_date)\n    - I want to visit [in the next available break](arrival_date)\n    - I want to go [in the next available vacation](arrival_date)\n    - I want to travel [in the next available season](arrival_date)\n    - I want to visit [in the next available year](arrival_date)\n    - I want to go [in the next available quarter](arrival_date)\n    - I want to travel [in the next available semester](arrival_date)\n    - I want to visit [in the next available month](arrival_date)\n    - I want to go [in the next available day](arrival_date)\n    - I want to travel [in the next available hour](arrival_date)\n    - I want to visit [in the next available minute](arrival_date)\n    - I want to go [in the next available second](arrival_date)\n    - I want to travel [in the next available moment](arrival_date)\n    - I want to visit [in the next available instant](arrival_date)\n    - I want to go [in the next available opportunity](arrival_date)\n    - I want to travel [in the next available chance](arrival_date)\n    - I want to visit [in the next available possibility](arrival_date)\n    - I want to go [in the next available option](arrival_date)\n    - I want to travel [in the next available choice](arrival_date)\n    - I want to visit [in the next available selection](arrival_date)\n    - I want to go [in the next available pick](arrival_date)\n    - I want to travel [in the next available alternative](arrival_date)\n    - I want to visit [in the next available substitute](arrival_date)\n    - I want to go [in the next available replacement](arrival_date)\n    - I want to travel [in the next available stand-in](arrival_date)\n    - I want to visit [in the next available fill-in](arrival_date)\n    - I want to go [in the next available backup](arrival_date)\n    - I want to travel [in the next available reserve](arrival_date)\n    - I want to visit [in the next available spare](arrival_date)\n    - I want to go [in the next available extra](arrival_date)\n    - I want to travel [in the next available addition](arrival_date)\n    - I want to visit [in the next available supplement](arrival_date)\n    - I want to go [in the next available complement](arrival_date)\n    - I want to travel [in the next available enhancement](arrival_date)\n    - I want to visit [in the next available improvement](arrival_date)\n    - I want to go [in the next available upgrade](arrival_date)\n    - I want to travel [in the next available update](arrival_date)\n    - I want to visit [in the next available revision](arrival_date)\n    - I want to go [in the next available modification](arrival_date)\n    - I want to travel [in the next available adjustment](arrival_date)\n    - I want to visit [in the next available change](arrival_date)\n    - I want to go [in the next available alteration](arrival_date)\n    - I want to travel [in the next available transformation](arrival_date)\n    - I want to visit [in the next available conversion](arrival_date)\n    - I want to go [in the next available transition](arrival_date)\n    - I want to travel [in the next available shift](arrival_date)\n    - I want to visit [in the next available switch](arrival_date)\n    - I want to go [in the next available swap](arrival_date)\n    - I want to travel [in the next available exchange](arrival_date)\n    - I want to visit [in the next available trade](arrival_date)\n    - I want to go [in the next available transaction](arrival_date)\n    - I want to travel [in the next available deal](arrival_date)\n    - I want to visit [in the next available arrangement](arrival_date)\n    - I want to go [in the next available agreement](arrival_date)\n    - I want to travel [in the next available contract](arrival_date)\n    - I want to visit [in the next available settlement](arrival_date)\n    - I want to go [in the next available resolution](arrival_date)\n    - I want to travel [in the next available conclusion](arrival_date)\n    - I want to visit [in the next available outcome](arrival_date)\n    - I want to go [in the next available result](arrival_date)\n    - I want to travel [in the next available consequence](arrival_date)\n    - I want to visit [in the next available effect](arrival_date)\n    - I want to go [in the next available impact](arrival_date)\n    - I want to travel [in the next available influence](arrival_date)\n    - I want to visit [in the next available inspiration](arrival_date)\n    - I want to go [in the next available motivation](arrival_date)\n    - I want to travel [in the next available encouragement](arrival_date)\n    - I want to visit [in the next available support](arrival_date)\n    - I want to go [in the next available help](arrival_date)\n    - I want to travel [in the next available assistance](arrival_date)\n    - I want to visit [in the next available guidance](arrival_date)\n    - I want to go [in the next available advice](arrival_date)\n    - I want to travel [in the next available recommendation](arrival_date)\n    - I want to visit [in the next available suggestion](arrival_date)\n    - I want to go [in the next available tip](arrival_date)\n    - I want to travel [in the next available hint](arrival_date)\n    - I want to visit [in the next available clue](arrival_date)\n    - I want to go [in the next available indication](arrival_date)\n    - I want to travel [in the next available sign](arrival_date)\n    - I want to visit [in the next available signal](arrival_date)\n    - I want to go [in the next available symptom](arrival_date)\n    - I want to travel [in the next available evidence](arrival_date)\n    - I want to visit [in the next available proof](arrival_date)\n    - I want to go [in the next available confirmation](arrival_date)\n    - I want to travel [in the next available verification](arrival_date)\n    - I want to visit [in the next available validation](arrival_date)\n    - I want to go [in the next available authentication](arrival_date)\n    - I want to travel [in the next available authorization](arrival_date)\n    - I want to visit [in the next available approval](arrival_date)\n    - I want to go [in the next available permission](arrival_date)\n    - I want to travel [in the next available consent](arrival_date)\n    - I want to visit [in the next available agreement](arrival_date)\n    - I want to go [in the next available contract](arrival_date)\n    - I want to travel [in the next available settlement](arrival_date)\n    - I want to visit [in the next available resolution](arrival_date)\n    - I want to go [in the next available conclusion](arrival_date)\n    - I want to travel [in the next available outcome](arrival_date)\n    - I want to visit [in the next available result](arrival_date)\n    - I want to go [in the next available consequence](arrival_date)\n    - I want to travel [in the next available effect](arrival_date)\n    - I want to visit [in the next available impact](arrival_date)\n    - I want to go [in the next available influence](arrival_date)\n    - I want to travel [in the next available inspiration](arrival_date)\n    - I want to visit [in the next available motivation](arrival_date)\n    - I want to go [in the next available encouragement](arrival_date)\n    - I want to travel [in the next available support](arrival_date)\n    - I want to visit [in the next available help](arrival_date)\n    - I want to go [in the next available assistance](arrival_date)\n    - I want to travel [in the next available guidance](arrival_date)\n    - I want to visit [in the next available advice](arrival_date)\n    - I want to go [in the next available recommendation](arrival_date)\n    - I want to travel [in the next available suggestion](arrival_date)\n    - I want to visit [in the next available tip](arrival_date)\n    - I want to go [in the next available hint](arrival_date)\n    - I want to travel [in the next available clue](arrival_date)\n    - I want to visit [in the next available indication](arrival_date)\n    - I want to go [in the next available sign](arrival_date)\n    - I want to travel [in the next available signal](arrival_date)\n    - I want to visit [in the next available symptom](arrival_date)\n    - I want to go [in the next available evidence](arrival_date)\n    - I want to travel [in the next available proof](arrival_date)\n    - I want to visit [in the next available confirmation](arrival_date)\n    - I want to go [in the next available verification](arrival_date)\n    - I want to travel [in the next available validation](arrival_date)\n    - I want to visit [in the next available authentication](arrival_date)\n    - I want to go [in the next available authorization](arrival_date)\n    - I want to travel [in the next available approval](arrival_date)\n    - I want to visit [in the next available permission](arrival_date)\n- intent: describe_city\n  examples: |\n    - I want a historical city\n    - I want a city with ancient temples\n    - I want a city with pyramids\n    - I want a city with museums\n    - I want a city with beaches\n    - I want a city with sea\n    - I want a city with desert\n    - I want a city with mountains\n    - I want a city with nightlife\n    - I want a city with shopping\n    - I want a city with culture\n    - I want a city with history\n    - I want a city with nature\n    - I want a city with adventure\n    - I want a city with relaxation\n    - I want a city with entertainment\n    - I want a city with food\n    - I want a city with art\n    - I want a city with architecture\n    - I want a city with festivals\n    - I'm looking for a city with beaches and warm weather\n    - I'm looking for a city with a rich cultural heritage\n    - I'm looking for a city with a vibrant nightlife\n    - I'm looking for a city with historical landmarks\n    - I'm looking for historical sites and ancient ruins\n    - I'm looking for exciting outdoor places\n    - I'm looking for a city with beautiful parks and gardens\n    - I'm looking for a city with a mix of modern and traditional architecture\n    - I'm looking for a city with a lively arts scene\n    - I'm looking for a city with delicious local cuisine\n    - I'm looking for a city with a rich history and ancient temples\n    - I'm looking for a city with stunning natural landscapes\n    - I'm looking for peaceful places to relax and unwind\n    - I want a historical city with old buildings\n    - A modern city with good shopping malls and nightlife\n    - Somewhere calm and surrounded by nature\n    - I love mountains and hiking, so a city near that\n    - I prefer cities with a lot of museums and culture\n    - A coastal city with seafood restaurants\n    - A city that's famous for its traditional markets\n    - I'm into adventure, so somewhere with outdoor activities\n    - I want a peaceful city with beautiful landscapes\n    - A city known for its religious or spiritual places\n    - Somewhere family-friendly and safe\n    - A romantic city for couples\n    - I want a city that's lively and has festivals\n    - A desert city with unique scenery\n    - I'm thinking of a place with turquoise waters, coral reefs perfect for diving, and golden sandy beaches. It has luxury resorts by the coast, desert mountains in the background, and a vibrant nightlife with beach parties. The weather is sunny almost year-round, and it's famous for water sports like snorkeling and windsurfing\n    - Imagine a coastal retreat where the sea meets the desert. There are olive groves, salt lakes, and ancient ruins nearby. The sunsets are pink and orange, and the locals are known for their hospitality.\n    - Picture a city with a rich history, ancient temples, and bustling markets. The Nile River flows through it, and there are beautiful gardens and parks. The weather is warm, and the culture is vibrant with music and dance.\n    - Imagine a place with stunning beaches, crystal-clear waters, and a vibrant nightlife. There are luxury resorts, beach clubs, and water sports activities. The weather is sunny and warm, perfect for relaxation and adventure.\n    - Picture a city with ancient pyramids, bustling bazaars, and a rich cultural heritage. The Nile River flows through it, and there are beautiful gardens and parks. The weather is warm, and the locals are known for their hospitality.\n    - Imagine a coastal paradise with white sandy beaches, crystal-clear waters, and vibrant coral reefs. There are luxury resorts, beach clubs, and water sports activities. The weather is sunny and warm, perfect for relaxation and adventure.\n    - A Mediterranean gem with white sandy beaches, turquoise bays, and historic WWII caves. The water is calm and perfect for swimming, and the seafood is fresh. It's less touristy than Hurghada but has a charming Italian-Egyptian vibe.\n    - A mix of adventure and relaxation—think desert canyons, starry skies, and beachfront yoga sessions. The locals serve fresh seafood, and the shops sell handmade crafts. It's less crowded than Sharm but just as beautiful.\n    - A Mediterranean gem with white sandy beaches, turquoise bays, and historic WWII caves. The water is calm and perfect for swimming, and the seafood is fresh. It's less touristy than Hurghada but has a charming Italian-Egyptian vibe.\n    - A mix of adventure and relaxation—think desert canyons, starry skies, and beachfront yoga sessions. The locals serve fresh seafood, and the shops sell handmade crafts. It's less crowded than Sharm but just as beautiful.\n    - A vibrant city with a mix of ancient history and modern culture. The Nile River flows through it, and there are beautiful parks and gardens. The weather is warm, and the locals are known for their hospitality.\n    - A bohemian beach town with a laid-back vibe, where you can dive in the Blue Hole or hike to Mount Sinai at sunrise. The streets are lined with palm trees, cozy cafés, and Bedouin-style lounges. The sea is crystal clear, and the mountains are rugged and dramatic.\n    - A city with a rich history, ancient temples, and bustling markets. The Nile River flows through it, and there are beautiful gardens and parks. The weather is warm, and the locals are known for their hospitality.\n    - I want to visit a historic city full of ancient temples, giant statues, and tombs carved into the mountains. It's on the Nile River, with hot, dry weather, and is known for its open-air museums, hieroglyphics, and sunset felucca rides. The locals sell handmade souvenirs near the ruins.\n    - A coastal city with beautiful beaches, luxury resorts, and a vibrant nightlife. The weather is warm and sunny, perfect for relaxation and water sports. The locals are friendly, and the seafood is fresh and delicious.\n    - I want a city with [ski slopes](city_feature)\n    - I want a city with [volcanoes](city_feature)\n    - I want a city with [rainforests](city_feature)\n    - I want a city with [polar bears](city_feature)\n    - I want a city with [northern lights](city_feature)\n    - I want a city with [ice hotels](city_feature)\n    - I want a city with [fjords](city_feature)\n    - I want a city with [hot springs](city_feature)\n    - I want a city with [tulip fields](city_feature)\n    - I want a city with [cherry blossoms](city_feature)\n    - I want a city with [kangaroos](city_feature)\n    - I want a city with [koalas](city_feature)\n    - I want a city with [penguins](city_feature)\n    - I want a city with [glaciers](city_feature)\n    - I want a city with [rainbow mountains](city_feature)\n    - I want a city with [bamboo forests](city_feature)\n    - I want a city with [giant sequoia trees](city_feature)\n    - I want a city with [coral atolls](city_feature)\n    - I want a city with [icebergs](city_feature)\n    - I want a city with [polar nights](city_feature)\n    - I want a city with [midnight sun](city_feature)\n    - I want a city with [tropical islands](city_feature)\n    - I want a city with [geysers](city_feature)\n    - I want a city with [rainbow lakes](city_feature)\n    - I want a city with [aurora borealis](city_feature)\n    - I want a city that's [very quiet](city_feature)\n    - I want a city that's [always busy](city_feature)\n    - I want a city that's [never crowded](city_feature)\n    - I want a city that's [extremely modern](city_feature)\n    - I want a city that's [completely traditional](city_feature)\n    - I want a city that's [eco-friendly](city_feature)\n    - I want a city that's [pet-friendly](city_feature)\n    - I want a city that's [child-free](city_feature)\n    - I want a city that's [car-free](city_feature)\n    - I want a city that's [bike-friendly](city_feature)\n    - I want a city that's [tech-savvy](city_feature)\n    - I want a city that's [futuristic](city_feature)\n    - I want a city that's [ancient](city_feature)\n    - I want a city that's [mysterious](city_feature)\n    - I want a city that's [romantic](city_feature)\n    - I want a city that's [adventurous](city_feature)\n    - I want a city that's [relaxing](city_feature)\n    - I want a city that's [inspiring](city_feature)\n    - I want a city that's [artistic](city_feature)\n    - I want a city that's [spiritual](city_feature)\n    - I want a city that's [festive](city_feature)\n    - I want a city that's [colorful](city_feature)\n    - I want a city that's [unique](city_feature)\n    - I want a city that's [unusual](city_feature)\n    - I want a city that's [famous](city_feature)\n    - I want a city that's [unknown](city_feature)\n    - I want a city that's [off the beaten path](city_feature)\n    - I want a city that's [full of surprises](city_feature)\n    - I want a city that's [hard to find](city_feature)\n    - I want a city that's [easy to get to](city_feature)\n    - I want a city that's [close to the airport](city_feature)\n    - I want a city that's [far from the city center](city_feature)\n    - I want a city that's [on the coast](city_feature)\n    - I want a city that's [in the mountains](city_feature)\n    - I want a city that's [in the desert](city_feature)\n    - I want a city that's [by a river](city_feature)\n    - I want a city that's [on an island](city_feature)\n    - I want a city that's [in the forest](city_feature)\n    - I want a city that's [in the countryside](city_feature)\n    - I want a city that's [in the middle of nowhere](city_feature)\n    - I want a city that's [in the heart of everything](city_feature)\n    - I want a city that's [perfect for families](city_feature)\n    - I want a city that's [great for couples](city_feature)\n    - I want a city that's [ideal for solo travelers](city_feature)\n    - I want a city that's [good for groups](city_feature)\n    - I want a city that's [safe](city_feature)\n    - I want a city that's [affordable](city_feature)\n    - I want a city that's [luxurious](city_feature)\n    - I want a city that's [budget-friendly](city_feature)\n    - I want a city that's [expensive](city_feature)\n    - I want a city that's [exclusive](city_feature)\n    - I want a city that's [popular](city_feature)\n    - I want a city that's [trendy](city_feature)\n    - I want a city that's [classic](city_feature)\n    - I want a city that's [timeless](city_feature)\n    - I want a city that's [historic](city_feature)\n    - I want a city that's [modern](city_feature)\n    - I want a city that's [ancient and modern at the same time](city_feature)\n    - I want a city that's [full of life](city_feature)\n    - I want a city that's [peaceful](city_feature)\n    - I want a city that's [bustling](city_feature)\n    - I want a city that's [quiet](city_feature)\n    - I want a city that's [noisy](city_feature)\n    - I want a city that's [clean](city_feature)\n    - I want a city that's [green](city_feature)\n    - I want a city that's [sunny](city_feature)\n    - I want a city that's [rainy](city_feature)\n    - I want a city that's [windy](city_feature)\n    - I want a city that's [foggy](city_feature)\n    - I want a city that's [cloudy](city_feature)\n    - I want a city that's [chilly](city_feature)\n    - I want a city that's [hot](city_feature)\n    - I want a city that's [cold](city_feature)\n    - I want a city that's [humid](city_feature)\n    - I want a city that's [dry](city_feature)\n    - I want a city that's [temperate](city_feature)\n    - I want a city that's [tropical](city_feature)\n    - I want a city that's [arid](city_feature)\n    - I want a city that's [deserted](city_feature)\n    - I want a city that's [crowded](city_feature)\n    - I want a city that's [remote](city_feature)\n    - I want a city that's [central](city_feature)\n    - I want a city that's [suburban](city_feature)\n    - I want a city that's [urban](city_feature)\n    - I want a city that's [rural](city_feature)\n    - I want a city that's [metropolitan](city_feature)\n    - I want a city that's [cosmopolitan](city_feature)\n    - I want a city that's [provincial](city_feature)\n    - I want a city that's [international](city_feature)\n    - I want a city that's [local](city_feature)\n    - I like warm weather, so I want a city with [sunny beaches](city_feature)\n    - I like [warm places](city_feature)\n    - I want a city that's [multicultural](city_feature)\n    - I want a city that's [traditional and modern](city_feature)\n    - I want a city that's [historic and trendy](city_feature)\n    - I want a city that's [quiet and lively](city_feature)\n    - I want a city that's [safe and exciting](city_feature)\n    - I want a city that's [affordable and luxurious](city_feature)\n    - I want a city that's [family-friendly and romantic](city_feature)\n    - I want a city that's [adventurous and relaxing](city_feature)\n    - I want a city that's [artistic and spiritual](city_feature)\n    - I want a city that's [festive and peaceful](city_feature)\n    - I want a city that's [colorful and unique](city_feature)\n    - I want a city that's [famous and unknown](city_feature)\n    - I want a city that's [off the beaten path and full of surprises](city_feature)\n    - I want a city that's [hard to find and easy to get to](city_feature)\n    - I want a city that's [close to the airport and far from the city center](city_feature)\n    - I want a city that's [on the coast and in the mountains](city_feature)\n    - I want a city that's [in the desert and by a river](city_feature)\n    - I want a city that's [on an island and in the forest](city_feature)\n    - I want a city that's [in the countryside and in the middle of nowhere](city_feature)\n    - I want a city that's [in the heart of everything and perfect for families](city_feature)\n    - I want a city that's [great for couples and ideal for solo travelers](city_feature)\n    - I want a city that's [good for groups and safe](city_feature)\n    - I want a city that's [affordable and luxurious](city_feature)\n    - I want a city that's [budget-friendly and expensive](city_feature)\n    - I want a city that's [exclusive and popular](city_feature)\n    - I want a city that's [trendy and classic](city_feature)\n    - I want a city that's [timeless and historic](city_feature)\n    - I want a city that's [modern and ancient at the same time](city_feature)\n    - I want a city that's [full of life and peaceful](city_feature)\n    - I want a city that's [bustling and quiet](city_feature)\n    - I want a city that's [noisy and clean](city_feature)\n    - I want a city that's [green and sunny](city_feature)\n    - I want a city that's [rainy and windy](city_feature)\n    - I want a city that's [foggy and cloudy](city_feature)\n    - I want a city that's [chilly and hot](city_feature)\n    - I want a city that's [cold and humid](city_feature)\n    - I want a city that's [dry and temperate](city_feature)\n    - I want a city that's [tropical and arid](city_feature)\n    - I want a city that's [deserted and crowded](city_feature)\n    - I want a city that's [remote and central](city_feature)\n    - I want a city that's [suburban and urban](city_feature)\n    - I want a city that's [rural and metropolitan](city_feature)\n    - I want a city that's [cosmopolitan and provincial](city_feature)\n    - I want a city that's [international and local](city_feature)\n    - I want a city that's [multicultural and traditional](city_feature)\n    - I want a city that's [modern and historic](city_feature)\n    - I want a city that's [trendy and quiet](city_feature)\n    - I want a city that's [safe and affordable](city_feature)\n    - I want a city that's [luxurious and budget-friendly](city_feature)\n    - I want a city that's [romantic and family-friendly](city_feature)\n    - I want a city that's [adventurous and relaxing](city_feature)\n    - I want a city that's [artistic and spiritual](city_feature)\n    - I want a city that's [festive and peaceful](city_feature)\n    - I want a city that's [colorful and unique](city_feature)\n    - I want a city that's [famous and unknown](city_feature)\n    - I want a city that's [off the beaten path and full of surprises](city_feature)\n    - I want a city that's [hard to find and easy to get to](city_feature)\n    - I want a city that's [close to the airport and far from the city center](city_feature)\n    - I want a city that's [on the coast and in the mountains](city_feature)\n    - I want a city that's [in the desert and by a river](city_feature)\n    - I want a city that's [on an island and in the forest](city_feature)\n    - I want a city that's [in the countryside and in the middle of nowhere](city_feature)\n    - I want a city that's [in the heart of everything and perfect for families](city_feature)\n    - I want a city that's [great for couples and ideal for solo travelers](city_feature)\n    - I want a city that's [good for groups and safe](city_feature)\n    - no, i want a city with [beaches and quiet places](city_feature)\n- intent: edit_preference\n  examples: |\n    - I want to change my [budget](modify_field)\n    - I want to modify my [hotel features](modify_field)\n    - I want to update my [landmarks and activities](modify_field)\n    - I want to change my [weather preference](modify_field)\n    - Let's change [hotel features](modify_field)\n    - I want to modify my [duration](modify_field)\n    - Edit [landmarks and activities](modify_field)\n- intent: request_activity_suggestions\n  examples: |\n    - What activities can I do?\n    - I don't know what to do, suggest something\n    - Recommend some activities\n    - What are my options?\n    - Give me ideas for things to do\n    - I'm not sure, help me choose\n    - What can I do there?\n    - Suggest some activities for me\n    - What are some fun things to do?\n    - I need suggestions for activities\n    - What activities do you recommend?\n    - I need help with activity ideas\n    - What can I do during my trip?\n    - I want to know about activities\n    - What are some activities I can do?\n    - I need help with activity suggestions\n    - What activities should I consider?\n    - I want to know what to do\n    - I need ideas for activities\n- intent: add_hotel_features\n  examples: |\n    - I want to add [pool](hotel_features) for my hotel\n    - I want to add [spa](hotel_features) for my hotel\n    - I want to add [gym](hotel_features) for my hotel\n    - Add [restaurant](hotel_features) for my hotel\n    - Add [bar](hotel_features) and [spa](hotel_features) for my hotel\n    - Add a [beach_view](hotel_features) for my hotel\n    - Add a [city_center](hotel_features) to my hotel\n    - I want to add [beach_view](hotel_features) and [city_center](hotel_features) to my hotel\n    - I want to add a [beach_view](hotel_features) and [city_center](hotel_features) to my hotel\n    - also add a [beach_view](hotel_features) and [city_center](hotel_features) to my hotel\n    - add a [beach_view](hotel_features) and [city_center](hotel_features) to my hotel\n    - include [spa](hotel_features) and [beach_view](hotel_features) in my hotel\n    - include [gym](hotel_features) in the hotel\n    - I want [pool](hotel_features), [spa](hotel_features), and [gym](hotel_features) in my hotel\n    - I want [restaurant](hotel_features), and [bar](hotel_features) in my hotel\n    - add [restaurant](hotel_features) and [bar](hotel_features)\n    - add [gym](hotel_features) and [spa](hotel_features)\n    - include [spa](hotel_features) and [beach_view](hotel_features)\n    - also add [city_center](hotel_features) and [beach_view](hotel_features)\n    - also add [beach_view](hotel_features) and [city_center](hotel_features)\n    - I want [city_center](hotel_features) and [beach_view](hotel_features) too\n    - I want [beach_view](hotel_features) and [city_center](hotel_features) too\n- intent: add_landmarks_activities\n  examples: |\n    - I want to add [historical landmarks](landmarks_activities) to my trip\n    - I want to add [desert safaris](landmarks_activities) to my trip\n    - I want to add [museums](landmarks_activities) to my trip\n    - I want to add [beaches](landmarks_activities) too\n    - I want to add [temples](landmarks_activities) too\n    - add [cruise](landmarks_activities) and [desert safaris](landmarks_activities)\n    - add [museums](landmarks_activities) and [beaches](landmarks_activities)\n    - add [historical landmarks](landmarks_activities) and [desert safaris](landmarks_activities)\n    - include [cruise](landmarks_activities), [desert safaris](landmarks_activities), and [historical landmarks](landmarks_activities)\n    - also add [cruise](landmarks_activities), [desert safaris](landmarks_activities), and [historical landmarks](landmarks_activities)\n    - also include [cruise](landmarks_activities), [desert safaris](landmarks_activities), and [historical landmarks](landmarks_activities)\n    - also include [museums](landmarks_activities) and [beaches](landmarks_activities)\n    - include [museums](landmarks_activities) and [beaches](landmarks_activities)\n    - include [cruise](landmarks_activities)\n    - add [desert safaris](landmarks_activities)\n    \n- synonym: Luxor\n  examples: |\n    - luxor\n- synonym: Cairo\n  examples: |\n    - cairo\n- synonym: Alexandria\n  examples: |\n    - alexandria\n    - alex\n    - Alex\n- synonym: Aswan\n  examples: |\n    - aswan\n- synonym: Hurghada\n  examples: |\n    - hurghada\n- synonym: Sharm El Sheikh\n  examples: |\n    - sharm el sheikh\n- synonym: Dahab\n  examples: |\n    - dahab\n- synonym: Marsa Alam\n  examples: |\n    - marsaalam\n- synonym: El Gouna\n  examples: |\n    - el gouna\n- synonym: Siwa Oasis\n  examples: |\n    - siwa oasis\n\n- lookup: state\n  examples: |\n    - luxor\n    - cairo\n    - alexandria\n    - aswan\n    - hurghada\n    - sharm el sheikh\n    - dahab\n    - marsa Alam\n    - el gouna\n    - siwa oasis\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/nlu.yml b/data/nlu.yml
--- a/data/nlu.yml	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/data/nlu.yml	(date 1749796266530)
@@ -1025,6 +1025,8 @@
     - I want a hotel with [poolside activities](hotel_features)
 - intent: share_landmarks_activities
   examples: |
+    - I want to visit [Wadi El Hitan](landmarks_activities)
+    - Show me [Saint Simon Monastery](landmarks_activities)
     - I want to explore [historical landmarks](landmarks_activities)
     - I want to see [Eiffel Tower](landmarks_activities)
     - I'm interested in [Alexandria library](landmarks_activities)
@@ -1761,13 +1763,31 @@
     - include [museums](landmarks_activities) and [beaches](landmarks_activities)
     - include [cruise](landmarks_activities)
     - add [desert safaris](landmarks_activities)
-    
-- synonym: Luxor
+
+- intent:   ask_suggest_trip
   examples: |
-    - luxor
-- synonym: Cairo
-  examples: |
-    - cairo
+      - OK I want to suggest a trip
+      - OK suggest a trip for me
+      - OK can you suggest a trip?
+      - Cool, suggest a trip for me
+      - that's great, I want to plan a trip
+      - I want to suggest a trip
+      - Suggest a trip for me
+      - Can you suggest a trip?
+      - I need a trip suggestion
+      - Help me plan a trip
+      - I want to plan a trip
+      - Suggest a travel itinerary
+      - I need help with my travel plans
+      - Can you help me plan my trip?
+      - I want to create a travel plan
+      - Help me with my travel itinerary
+      - I need suggestions for my trip
+      - Can you suggest a travel plan?
+      - I want to organize a trip
+      - Help me organize my travel plans
+
+
 - synonym: Alexandria
   examples: |
     - alexandria
@@ -1776,34 +1796,71 @@
 - synonym: Aswan
   examples: |
     - aswan
+- synonym: Cairo
+  examples: |
+    - cairo  
+
+- synonym: Dahab
+  examples: |
+    - dahab
+- synonym: El Gouna
+  examples: |
+    - el gouna
+    - gouna
+    - al gouna
+    - elgouna
+    - Gouna
+    - algouna
+- synonym: Giza
+  examples: |
+    - giza
+    - Giza
+    - el giza
+    - El Giza
+    - El giza
 - synonym: Hurghada
   examples: |
     - hurghada
-- synonym: Sharm El Sheikh
+- synonym: Luxor
   examples: |
-    - sharm el sheikh
-- synonym: Dahab
-  examples: |
-    - dahab
+    - luxor
 - synonym: Marsa Alam
   examples: |
     - marsaalam
-- synonym: El Gouna
+    - marsa alam
+    - marsa
+    - Marsa Alam
+- synonym: Marsa Matrouh
+  examples: |
+    - marsa matrouh
+    - marsamatrouh
+    - matrouh
+    - Marsa Matrouh
+
+- synonym: Sharm El Sheikh
   examples: |
-    - el gouna
+    - sharm el sheikh
+    - sharmelsheikh
+    - sharm
+    - Sharm
 - synonym: Siwa Oasis
   examples: |
     - siwa oasis
+    - siwa
+    - Siwa
+
 
 - lookup: state
   examples: |
-    - luxor
-    - cairo
-    - alexandria
-    - aswan
-    - hurghada
-    - sharm el sheikh
-    - dahab
-    - marsa Alam
-    - el gouna
-    - siwa oasis
+    - Alexandria
+    - Aswan
+    - Cairo
+    - Dahab
+    - El Gouna
+    - Giza
+    - Hurghada
+    - Luxor
+    - Marsa Alam
+    - Marsa Matruh
+    - Sharm El Sheikh
+    - Siwa Oasis
Index: domain.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version: '3.1'\nintents:\n- add_hotel_features\n- add_landmarks_activities\n- affirm\n- bot_challenge\n- deny\n- describe_city\n- edit_preference\n- goodbye\n- greet\n- nlu_fallback\n- out_of_scope\n- request_activity_suggestions\n- request_trip\n- share_arrival_date\n- share_budget\n- share_duration\n- share_family_status\n- share_hotel_features\n- share_landmarks_activities\n- share_state\n- thankyou\nentities:\n- hotel_features\n- state\n- landmarks_activities\n- budget\n- duration\n- arrival_date\n- modify_field\n- city_feature\nslots:\n  specify_place:\n    type: bool\n    influence_conversation: true\n    mappings:\n    - type: from_intent\n      intent: affirm\n      value: true\n    - type: from_intent\n      intent: deny\n      value: false\n  state:\n    type: text\n    influence_conversation: true\n    mappings:\n    - type: from_entity\n      entity: state\n  city_description:\n    type: text\n    influence_conversation: true\n    mappings:\n    - type: from_text\n      intent: describe_city\n      entity: city_feature\n  city_features:\n    type: list\n    influence_conversation: true\n    mappings:\n    - type: from_entity\n      entity: city_feature\n  selected_city:\n    type: text\n    influence_conversation: true\n    mappings:\n    - type: from_text\n      intent: share_state\n    - type: custom\n  budget:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: budget\n  hotel_features:\n    type: list\n    mappings:\n    - type: from_entity\n      entity: hotel_features\n  landmarks_activities:\n    type: list\n    mappings:\n    - type: from_entity\n      entity: landmarks_activities\n  duration:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: duration\n  arrival_date:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: arrival_date\n  modify_field:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: modify_field\n  user_message:\n    type: any\n    influence_conversation: false\n    mappings:\n    - type: custom\n  awaiting_city_selection:\n    type: bool\n    initial_value: false\n    influence_conversation: true\n    mappings:\n    - type: custom\n  suggested_cities:\n    type: list\n    influence_conversation: true\n    mappings:\n    - type: custom\nforms:\n  trip_form:\n    required_slots:\n    - specify_place\n    - state\n    - city_description\n    - budget\n    - duration\n    - arrival_date\n    - hotel_features\n    - landmarks_activities\nresponses:\n  utter_greet:\n    - text: \"Hey there! \uD83D\uDC4B I'm Rahhal, your friendly travel companion for exploring the wonders of Egypt! \uD83C\uDDEA\uD83C\uDDEC I'm super excited to help you plan an unforgettable adventure. What's on your mind today?\"\n    - text: \"Hi! \uD83D\uDE4C I'm Rahhal, and I'd love to be your travel buddy for your Egyptian journey! I've got tons of insider tips and can't wait to help you discover amazing places. What would you like to explore first?\"\n    - text: \"Welcome! \uD83C\uDF1F I'm Rahhal, and I'm here to make your Egyptian adventure planning a breeze! Whether you're dreaming of ancient pyramids or beautiful beaches, I'm all ears. What's your travel dream?\"\n\n  utter_goodbye:\n    - text: \"Take care! \uD83D\uDC4B I hope your Egyptian adventure is filled with incredible memories and amazing experiences. Don't forget to share your stories when you're back!\"\n    - text: \"Until next time! \uD83D\uDC4B Safe travels, and I hope you fall in love with Egypt just as much as I have. Can't wait to hear about your adventures!\"\n    - text: \"Goodbye for now! ✨ I'm here whenever you need help planning your next Egyptian adventure. Have an amazing time exploring!\"\n    - text: \"Until next time! \uD83D\uDC4B Safe travels, and I hope you fall in love with Egypt just as much as I have. Can't wait to hear about your adventures!\"\n    - text: \"Goodbye for now! ✨ I'm here whenever you need help planning your next Egyptian adventure. Have an amazing time exploring!\"\n\n  utter_iamabot:\n    - text: \"I'm Rahhal, your friendly AI travel companion! \uD83E\uDD16 While I might be digital, I'm passionate about helping you discover the magic of Egypt. Think of me as your local friend who knows all the best spots! \uD83D\uDE0A\"\n    - text: \"I'm Rahhal, your virtual travel buddy! \uD83C\uDF0D I may be an AI, but I'm here to chat and help plan your perfect Egyptian adventure, just like a friend would. What can I help you with today?\"\n    - text: \"Hey! I'm Rahhal, your AI travel assistant with a love for Egypt! \uD83E\uDD16 I might be digital, but I'm here to make your travel planning fun and easy. Let's chat about your dream trip!\"\n\n  utter_ask_specify_place:\n    - text: \"Do you have any specific city in Egypt in mind for your visit? I can help you plan your journey there! \uD83D\uDE0A\"\n    - text: \"Is there a particular city in Egypt you'd like to explore? Whether it's Cairo, Alexandria, or any other city, I'm here to help! \uD83C\uDFDC\uFE0F\"\n    - text: \"Have you decided which city in Egypt you want to visit? I can provide you with all the information you need! \uD83C\uDF1F\"\n\n  utter_ask_state:\n    - text: \"Which city has caught your eye? I'd love to hear what draws you there! Maybe Cairo, Alexandria, or Luxor? \uD83C\uDFD9\uFE0F\"\n    - text: \"Tell me about your dream destination! I'm excited to help you explore it! Whether it's the pyramids of Giza or the beaches of Sharm El Sheikh! ✨\"\n    - text: \"What's the city that's calling your name? I can't wait to help you discover its magic! ✨\"\n    - text: \"Which city are you thinking about? \uD83C\uDFD9\uFE0F\"\n    - text: \"Where would you love to go? I'm all ears! \uD83D\uDC42\uD83D\uDCAC\"\n    - text: \"Have you got your heart set on any particular city in Egypt? I'd love to help you explore it! \uD83C\uDF1F\"\n    - text: \"Which Egyptian city is calling your name? I'm here to make your travel dreams come true! \uD83C\uDFDC\uFE0F\"\n\n  utter_ask_budget:\n    - text: \"Let's talk budget! \uD83D\uDCB8 I want to make sure we plan something that's perfect for you. What's your comfortable spending range?\"\n    - text: \"Money matters! \uD83D\uDCB0 I'd love to help you plan something amazing within your budget. What are you thinking of spending?\"\n    - text: \"Let's make sure we plan something that works for you! What's your ideal budget for this adventure?\"\n    - text: \"Let me know your budget — I'll make sure we stay within it! \uD83D\uDCB0\uD83D\uDE0A\"\n    - text: \"What's your budget for this Egyptian adventure? I'll help you get the best value! \uD83D\uDC8E\"\n    - text: \"How much would you like to spend on your trip? I'll make sure every penny counts! \uD83D\uDCAB\"\n\n  utter_ask_hotel_features:\n    - text: \"What would make your stay extra special? Maybe a pool with a view, a spa, or perhaps a rooftop restaurant? I'm all ears!\uD83D\uDC42\"\n    - text: \"Let's find your perfect home away from home! \uD83D\uDECC What facilities would make your stay unforgettable in the hotel? For example, do you need a gym, kids' club, or beach access?\"\n    - text: \"I want to find you the perfect place to stay! \uD83C\uDF1F What are your must-haves for a comfortable and enjoyable stay?\"\n    - text: \"What facilitaties are important for your stay? I'll help you find the perfect match! \uD83C\uDFE8\"\n    - text: \"What would make your hotel stay perfect? Let me know your preferences! ✨\"\n\n  utter_ask_landmarks_activities:\n    - text: \"What gets you excited when you travel? \uD83C\uDFA1 Are you into history, adventure, relaxation, or maybe a mix of everything? For example, would you like to visit the pyramids, go diving in the Red Sea, or explore ancient temples?\"\n    - text: \"I'd love to know what interests you most! \uD83C\uDFDB\uFE0F Are you drawn to ancient sites, local culture, or maybe some fun activities?\"\n    - text: \"Let's plan some amazing experiences! \uD83D\uDE0D What kind of activities make your heart skip a beat when you travel?\"\n    - text: \"What would you love to explore in Egypt?\uD83D\uDDFA\uFE0F\"\n    - text: \"What kind of experiences are you looking for? I'll help you discover the perfect activities! \uD83C\uDF1F\"\n\n  utter_ask_duration:\n    - text: \"How long are you planning to stay? \uD83D\uDCC5 I want to make sure we plan the perfect amount of activities!\"\n    - text: \"What's your ideal trip length? ⏳ I'll make sure every day is packed with amazing experiences!\"\n    - text: \"How long would you love to stay? Just give me a number and I'll do the rest \uD83D\uDE0A\"\n    - text: \"What's your preferred trip duration? I'll help you make the most of your time! \uD83D\uDD52\"\n    - text: \"How many days would you like to spend in Egypt? I'll plan the perfect itinerary! \uD83D\uDCC6\"\n\n  utter_ask_arrival_date:\n    - text: \"When's the big day? \uD83D\uDDD3\uFE0F I want to make sure we plan something perfect for the season!\"\n    - text: \"What dates are you thinking of? \uD83D\uDCC6 I'll help you plan around any special events or weather considerations!\"\n    - text: \"When are you planning to arrive? \uD83D\uDE80 I can't wait to help you plan your perfect timing!\"\n    - text: \"When would you like to start your Egyptian adventure? I'll help you pick the perfect time! ✈\uFE0F\"\n    - text: \"What's your preferred travel date? I'll make sure everything is perfect! \uD83C\uDFAF\"\n\n  utter_ask_trip_details:\n    - text: \"I'd love to know more about your dream trip! \uD83D\uDCDD What's most important to you - the sights, the experiences, or maybe the local culture?\"\n    - text: \"Let's make your trip perfect! \uD83D\uDCAC What aspects of your journey are you most excited about?\"\n    - text: \"I'm all ears! \uD83C\uDFAF What details would make this trip truly special for you?\"\n\n  utter_start_suggestions:\n    - text: \"Perfect! I'm going to craft something amazing just for you! \uD83C\uDF7D\uFE0F Give me a moment to put together the perfect plan!\"\n    - text: \"Excellent! I'm excited to create your dream itinerary! \uD83E\uDE84 Let me work my magic!\"\n    - text: \"Thanks for sharing! \uD83D\uDC96 I'm putting together something special that I think you'll love!\"\n\n  utter_thankyou:\n    - text: \"It's my pleasure! \uD83D\uDE0A I love helping people discover the magic of Egypt. Can't wait to hear about your adventures!\"\n    - text: \"Anytime! \uD83D\uDC9B Helping you plan your Egyptian adventure is what I'm here for!\"\n    - text: \"You're welcome! \uD83E\uDDED I'm so excited for you to experience all the wonders Egypt has to offer!\"\n\n  utter_out_of_scope:\n    - text: \"Sorry i didn't understand what you said, I'm really focused on helping with Egyptian travel plans! \uD83C\uDF0D Maybe I can help you plan an amazing trip instead?\"\n    - text: \"Oops! It seems like I got a bit lost there. \uD83D\uDE05 I'm here to help with Egyptian travel plans, so if you have any questions about that, I'm all ears! \uD83D\uDC42\"\n    - text: \"I didn't quite catch that. \uD83E\uDD14 I'm here to help you with Egyptian travel plans, so if you have any questions or need assistance, just let me know! \uD83C\uDFDC\uFE0F\"\n\n  utter_ask_city_description:\n    - text: \"What's your ideal city vibe? \uD83C\uDFDD\uFE0F Are you looking for something peaceful, exciting, historic, or maybe a bit of everything?\"\n    - text: \"Help me picture your perfect city! \uD83D\uDC40 What kind of atmosphere are you dreaming of?\"\n    - text: \"I'd love to know what you're looking for! \uD83C\uDFA8 What kind of city would make your heart sing?\"\n    - text: \"What type of city experience are you looking for? I'll help you find the perfect match! \uD83C\uDF06\"\n    - text: \"What kind of city are you dreaming of? I'll help you find the perfect destination! \uD83C\uDFD9\uFE0F\"\n\n  utter_choose_city:\n    - text: \"I've got some amazing options for you! \uD83D\uDE0D Which one speaks to your travel dreams? For example, we have historic Cairo, coastal Alexandria, or ancient Luxor!\"\n    - text: \"Take a look at these fantastic cities! \uD83C\uDF06 Which one feels like the perfect match for your adventure?\"\n    - text: \"I've picked some special places just for you! \uD83E\uDDF3 Which one feels like it could be your perfect destination?\"\n    - text: \"Here are some wonderful cities to explore! Which one catches your eye? \uD83C\uDF1F\"\n    - text: \"I've selected some amazing destinations for you! Which one would you like to discover? \uD83C\uDFDC\uFE0F\"\n\nactions:\n- validate_trip_form\n- action_suggest_plan\n- utter_start_suggestions\n- utter_greet\n- utter_goodbye\n- utter_iamabot\n- utter_ask_specify_place\n- utter_ask_state\n- utter_ask_budget\n- action_clear_chat\n- action_store_user_messages\n- action_suggest_hotels\n- action_handle_city_selection\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/domain.yml b/domain.yml
--- a/domain.yml	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/domain.yml	(date 1749796266530)
@@ -4,6 +4,7 @@
 - add_landmarks_activities
 - affirm
 - bot_challenge
+- clear_chat
 - deny
 - describe_city
 - edit_preference
@@ -16,10 +17,11 @@
 - share_arrival_date
 - share_budget
 - share_duration
-- share_family_status
 - share_hotel_features
 - share_landmarks_activities
 - share_state
+- ask_suggest_trip
+- modify_preference
 - thankyou
 entities:
 - hotel_features
@@ -68,7 +70,7 @@
       intent: share_state
     - type: custom
   budget:
-    type: text
+    type: float
     mappings:
     - type: from_entity
       entity: budget
@@ -113,6 +115,16 @@
     influence_conversation: true
     mappings:
     - type: custom
+  edit_preference_or_suggest_trip:
+    type: bool
+    influence_conversation: true
+    mappings:
+    - type: from_intent
+      intent: modify_preference
+      value: true
+    - type: from_intent
+      intent: request_trip
+      value: false
 forms:
   trip_form:
     required_slots:
@@ -226,6 +238,18 @@
     - text: "Here are some wonderful cities to explore! Which one catches your eye? 🌟"
     - text: "I've selected some amazing destinations for you! Which one would you like to discover? 🏜️"
 
+  utter_ask_edit_preference_or_suggest_trip:
+    - text: "Would you like to edit any part of your trip plan, or should I suggest some exciting prepared trips for you? 🗺️"
+    - text: "Do you want to make any changes to your trip plan, or shall I suggest some fun trip suits you from our trips? 🎉"
+    - text: "Is there anything you'd like to adjust in your trip plan, or would you like me to suggest some prepared trips? 🏖️"
+    - text: "Would you like to modify any details of your trip, or should I suggest some exciting trips that match your preferences? 🌍"
+
+  utter_edit_preference_or_suggest_trip:
+    - text: "Would you like to edit any part of your trip plan, or should I suggest some exciting prepared trips for you? 🗺️"
+    - text: "Do you want to make any changes to your trip plan, or shall I suggest some fun trip suits you from our trips? 🎉"
+    - text: "Is there anything you'd like to adjust in your trip plan, or would you like me to suggest some prepared trips? 🏖️"
+    - text: "Would you like to modify any details of your trip, or should I suggest some exciting trips that match your preferences? 🌍"
+
 actions:
 - validate_trip_form
 - action_suggest_plan
@@ -233,13 +257,9 @@
 - utter_greet
 - utter_goodbye
 - utter_iamabot
-- utter_ask_specify_place
-- utter_ask_state
-- utter_ask_budget
+- utter_edit_preference_or_suggest_trip
 - action_clear_chat
-- action_store_user_messages
-- action_suggest_hotels
-- action_handle_city_selection
+- action_suggest_trips
 session_config:
   session_expiration_time: 60
   carry_over_slots_to_new_session: true
Index: data/rules.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version: \"3.1\"\n\nrules:\n- rule: Clear chat session\n  steps:\n  - intent: clear_chat\n  - action: action_clear_chat\n\n- rule: Greet the user anytime the user says hello\n  steps:\n  - intent: greet\n  - action: utter_greet\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\n- rule: When the user is out of scope\n  steps:\n  - intent: out_of_scope\n  - action: utter_out_of_scope\n\n- rule: Say 'I am a bot' anytime the user challenges\n  steps:\n  - intent: bot_challenge\n  - action: utter_iamabot\n\n- rule: When the user say thankyou\n  steps:\n  - intent: thankyou\n  - action: utter_thankyou\n\n#rule for describing the trip form\n- rule: Activate trip_form\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle form completion\n  condition:\n  - active_loop: trip_form\n  steps:\n  - action: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- rule: Handle form interruption with bot challenge\n  condition:\n    - active_loop: trip_form\n  steps:\n    - intent: bot_challenge\n    - action: utter_iamabot\n    - action: trip_form\n    - active_loop: trip_form\n\n- rule: Handle form interruption with out of scope\n  condition:\n    - active_loop: trip_form\n  steps:\n    - intent: out_of_scope\n    - action: utter_out_of_scope\n    - action: trip_form\n    - active_loop: trip_form\n\n- rule: Handle form interruption with greeting\n  condition:\n    - active_loop: trip_form\n  steps:\n    - intent: greet\n    - action: utter_greet\n    - action: trip_form\n    - active_loop: trip_form\n\n- rule: Handle form interruption with goodbye\n  condition:\n    - active_loop: trip_form\n  steps:\n    - intent: goodbye\n    - action: utter_goodbye\n    - action: trip_form\n    - active_loop: trip_form\n\n- rule: Handle form interruption with thank you\n  condition:\n    - active_loop: trip_form\n  steps:\n    - intent: thankyou\n    - action: utter_thankyou\n    - action: trip_form\n    - active_loop: trip_form\n\n- rule: User wants to restart the conversation\n  steps:\n  - intent: restart\n  - action: action_restart\n\n- rule: Handle city description\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: describe_city\n    entities:\n    - city_description\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle multiple entities in one message\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: inform\n    entities:\n    - state\n    - budget\n    - duration\n    - arrival_date\n    - hotel_features\n    - landmarks_activities\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle state input\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: share_state\n    entities:\n    - state\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle budget input\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: share_budget\n    entities:\n    - budget\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle duration input\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: share_duration\n    entities:\n    - duration\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle arrival date input\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: share_arrival_date\n    entities:\n    - arrival_date\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle hotel features input\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: share_hotel_features\n    entities:\n    - hotel_features\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form\n\n- rule: Handle landmarks and activities input\n  condition:\n    - active_loop: trip_form\n  steps:\n  - intent: share_landmarks_activities\n    entities:\n    - landmarks_activities\n  - action: validate_trip_form\n  - action: trip_form\n  - active_loop: trip_form
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/rules.yml b/data/rules.yml
--- a/data/rules.yml	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/data/rules.yml	(date 1749796266694)
@@ -26,7 +26,7 @@
   - intent: bot_challenge
   - action: utter_iamabot
 
-- rule: When the user say thankyou
+- rule: When the user says thank you
   steps:
   - intent: thankyou
   - action: utter_thankyou
@@ -41,13 +41,27 @@
 - rule: Handle form completion
   condition:
   - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: null
   steps:
   - action: trip_form
   - active_loop: null
-  - slot_was_set:
-    - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
+
+- rule: Handle preference modification
+  steps:
+  - intent: modify_preference
+  - action: trip_form
+  - active_loop: trip_form
+
+- rule: Handle new trip request
+  steps:
+  - intent: request_trip
+  - action: trip_form
+  - active_loop: trip_form
 
 - rule: Handle form interruption with bot challenge
   condition:
@@ -190,4 +204,9 @@
     - landmarks_activities
   - action: validate_trip_form
   - action: trip_form
-  - active_loop: trip_form
\ No newline at end of file
+  - active_loop: trip_form
+
+- rule: Handle user input for trip suggestions
+  steps:
+  - intent: ask_suggest_trip
+  - action: action_suggest_trips
Index: run_all_apis.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>call .venv\\Scripts\\activate.bat\n\n:: Start Rasa services first\nstart cmd /k \"rasa run actions\"\nstart cmd /k \"rasa run --enable-api\"\n\n:: Start the embedding service (needed by other services)\nstart cmd /k \"uvicorn APIs.embedding_api:app --port 8001\"\n\n:: Start the combined recommendation API\nstart cmd /k \"uvicorn APIs.recommendation_APIs.combined_api:app --port 8002\"\n\n:: Start the main chatbot API last (depends on other services)\nstart cmd /k \"uvicorn APIs.chatbot_api:app --port 8000\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run_all_apis.bat b/run_all_apis.bat
--- a/run_all_apis.bat	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/run_all_apis.bat	(date 1749796266712)
@@ -5,10 +5,10 @@
 start cmd /k "rasa run --enable-api"
 
 :: Start the embedding service (needed by other services)
-start cmd /k "uvicorn APIs.embedding_api:app --port 8001"
+start cmd /k "uvicorn APIs.embedding_api:app --port 8001 --reload"
 
 :: Start the combined recommendation API
-start cmd /k "uvicorn APIs.recommendation_APIs.combined_api:app --port 8002"
+start cmd /k "uvicorn APIs.recommendation_system.combined_api:app --port 8002 --reload"
 
 :: Start the main chatbot API last (depends on other services)
-start cmd /k "uvicorn APIs.chatbot_api:app --port 8000"
+start cmd /k "uvicorn APIs.chatbot_api:app --port 8000 --reload"
Index: actions/suggest_plan_action.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rasa_sdk import Action, Tracker\nfrom rasa_sdk.executor import CollectingDispatcher\nimport requests\nimport json\nimport time\nfrom typing import Any, Dict, List, Text, Optional\nfrom requests.exceptions import RequestException, Timeout\nfrom config_helper import get_api_urls\nimport logging\nfrom pydantic import BaseModel\nfrom dataclasses import dataclass\n\nlogger = logging.getLogger(__name__)\n\nclass APIError(Exception):\n    # Base exception for API related errors\n    pass\n\nclass APIResponseError(APIError):\n    # Exception for invalid API responses\n    pass\n\nclass APITimeoutError(APIError):\n    # Exception for API timeout errors\n    pass\n\nclass APIConnectionError(APIError):\n    # Exception for API connection errors\n    pass\n\nclass Hotel(BaseModel):\n    hotel_id: Optional[int] = None\n    hotel_name: str\n    longitude: float\n    latitude: float\n    facilities: List[str]\n    score: Optional[float] = None\n    price_per_night: Optional[float] = None\n\nclass Activity(BaseModel):\n    id: Optional[int] = None\n    name: str\n    description: str\n    score: Optional[float] = None\n    price: float\n    duration: float\n\nclass Landmark(BaseModel):\n    id: Optional[int] = None\n    name: str\n    description: str\n    score: Optional[float] = None\n    price: float\n    longitude: float\n    latitude: float\n\nclass Plan(BaseModel):\n    hotel: Hotel\n    activities: List[Activity]\n    landmarks: List[Landmark]\n    total_score: Optional[float] = None\n    total_plan_cost: float\n\nclass PlanResponse(BaseModel):\n    plan_combinations: List[Plan]\n    raw_data: Optional[Dict[str, Any]] = None\n\n@dataclass\nclass APIConfig:\n    base_url: str\n    timeout: int = 50\n    max_retries: int = 3\n    retry_delay: int = 2\n\nclass APIClient:\n    def __init__(self, config: APIConfig):\n        self.config = config\n        self.session = requests.Session()\n\n    def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:\n        url = f\"{self.config.base_url}{endpoint}\"\n        retry_delay = self.config.retry_delay\n\n        for attempt in range(self.config.max_retries):\n            try:\n                response = self.session.request(\n                    method,\n                    url,\n                    timeout=self.config.timeout,\n                    **kwargs\n                )\n                response.raise_for_status()\n                return response.json()\n            except Timeout:\n                if attempt == self.config.max_retries - 1:\n                    raise APITimeoutError(f\"Request timed out after {self.config.max_retries} attempts\")\n                logger.warning(f\"Attempt {attempt + 1} timed out, retrying in {retry_delay} seconds...\")\n            except RequestException as e:\n                if attempt == self.config.max_retries - 1:\n                    raise APIConnectionError(f\"Failed to connect to API: {str(e)}\")\n                logger.warning(f\"Attempt {attempt + 1} failed, retrying in {retry_delay} seconds...\")\n            time.sleep(retry_delay)\n            retry_delay *= 2\n\n        raise APIError(\"Max retries exceeded\")\n\nclass SuggestPlan(Action):\n    def name(self) -> Text:\n        return \"action_suggest_plan\"\n\n    def __init__(self):\n        super().__init__()\n        self.api_configs = self._initialize_api_configs()\n\n    def _initialize_api_configs(self) -> Dict[str, APIConfig]:\n        api_urls = get_api_urls()\n        if not api_urls:\n            raise ValueError(\"API URLs configuration not found\")\n\n        return {\n            \"hotels\": APIConfig(base_url=api_urls[\"base_url\"]),\n            \"activities\": APIConfig(base_url=api_urls[\"base_url\"]),\n            \"landmarks\": APIConfig(base_url=api_urls[\"base_url\"]),\n            \"plans\": APIConfig(base_url=api_urls[\"base_url\"])\n        }\n\n    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        try:\n            # Get all required slots\n            city_name = tracker.get_slot(\"state\")\n            budget = tracker.get_slot(\"budget\")\n            duration = tracker.get_slot(\"duration\")\n            hotel_features = tracker.get_slot(\"hotel_features\")\n            landmarks_activities = tracker.get_slot(\"landmarks_activities\")\n            user_message = tracker.get_slot(\"user_message\") or {}\n            landmarks_activities_msg = user_message.get('landmarks_activities', '')\n\n            # Validate required slots\n            if not all([city_name, budget, duration]):\n                dispatcher.utter_message(\"Missing required information. Please provide all necessary details.\")\n                return []\n\n            # Initialize API clients\n            hotels_client = APIClient(self.api_configs[\"hotels\"])\n            activities_client = APIClient(self.api_configs[\"activities\"])\n            landmarks_client = APIClient(self.api_configs[\"landmarks\"])\n            plans_client = APIClient(self.api_configs[\"plans\"])\n\n            # Get recommendations\n            recommended_hotels = self._get_recommended_hotels(hotels_client, city_name, duration, budget, hotel_features)\n            recommended_activities = self._get_recommended_activities(activities_client, city_name, landmarks_activities_msg, landmarks_activities)\n            recommended_landmarks = self._get_recommended_landmarks(landmarks_client, city_name, landmarks_activities_msg, landmarks_activities)\n\n            # Generate plan\n            plan = self._generate_plan(plans_client, city_name, budget, duration, recommended_hotels, recommended_activities, recommended_landmarks)\n\n            if plan and plan.plan_combinations:\n                self._format_and_send_plans(dispatcher, plan.plan_combinations)\n            else:\n                dispatcher.utter_message(\n                    \"Sorry, we couldn't find any plans matching your preferences. Try to adjust your budget or duration.\"\n                )\n\n        except APIError as e:\n            logger.error(f\"API Error: {str(e)}\")\n            dispatcher.utter_message(\"Sorry, there was an error communicating with our services. Please try again later.\")\n        except Exception as e:\n            logger.error(f\"Unexpected error in SuggestPlan: {str(e)}\")\n            dispatcher.utter_message(\"Something went wrong while processing your plan request. Please try again.\")\n        return []\n\n    def _get_recommended_hotels(self, client: APIClient, city_name: str, duration: int, budget: float, hotel_features: List[str]) -> List[Hotel]:\n        try:\n            response = client._make_request(\n                \"POST\",\n                \"/hotels/search\",\n                json={\n                    \"city_name\": city_name,\n                    \"duration\": duration,\n                    \"budget\": budget,\n                    \"user_facilities\": hotel_features or [],\n                }\n            )\n            hotels = []\n            for hotel_data in response.get(\"hotels\", []):\n                try:\n                    # Convert facilities_ids to a facility list if needed\n                    if \"facilities_ids\" in hotel_data:\n                        hotel_data[\"facilities\"] = hotel_data.get(\"facilities\", [])\n                    hotels.append(Hotel(**hotel_data))\n                except Exception as e:\n                    logger.error(f\"Error parsing hotel data: {str(e)}\")\n                    continue\n            return hotels\n        except Exception as e:\n            logger.error(f\"Error fetching hotels: {str(e)}\")\n            return []\n\n    def _get_recommended_activities(self, client: APIClient, city_name: str, user_message: str, preferred_activities: List[str]) -> List[Activity]:\n        try:\n            response = client._make_request(\n                \"POST\",\n                \"/activities/search\",\n                json={\n                    \"city_name\": city_name,\n                    \"user_message\": user_message or \"\",\n                    \"preferred_activities\": preferred_activities or []\n                }\n            )\n            activities = []\n            for activity_data in response.get(\"activities\", []):\n                try:\n                    activities.append(Activity(**activity_data))\n                except Exception as e:\n                    logger.error(f\"Error parsing activity data: {str(e)}\")\n                    continue\n            return activities\n        except Exception as e:\n            logger.error(f\"Error fetching activities: {str(e)}\")\n            return []\n\n    def _get_recommended_landmarks(self, client: APIClient, city_name: str, user_message: str, preferred_activities: List[str]) -> List[Landmark]:\n        try:\n            response = client._make_request(\n                \"POST\",\n                \"/landmarks/search\",\n                json={\n                    \"city_name\": city_name,\n                    \"user_message\": user_message or \"\",\n                    \"preferred_landmarks\": preferred_activities or []\n                }\n            )\n            landmarks = []\n            for landmark_data in response.get(\"landmarks\", []):\n                try:\n                    landmarks.append(Landmark(**landmark_data))\n                except Exception as e:\n                    logger.error(f\"Error parsing landmark data: {str(e)}\")\n                    continue\n            return landmarks\n        except Exception as e:\n            logger.error(f\"Error fetching landmarks: {str(e)}\")\n            return []\n\n    def _generate_plan(self, client: APIClient, city_name: str, budget: float, duration: int, \n                      hotels: List[Hotel], activities: List[Activity], landmarks: List[Landmark]) -> Optional[PlanResponse]:\n        try:\n            request_payload = {\n                \"city_name\": city_name,\n                \"budget\": budget,\n                \"duration\": duration,\n                \"suggested_hotels\": [hotel.dict() for hotel in hotels],\n                \"suggested_activities\": [activity.dict() for activity in activities],\n                \"suggested_landmarks\": [landmark.dict() for landmark in landmarks]\n            }\n            \n            response = client._make_request(\"POST\", \"/api/plans\", json=request_payload)\n\n            \n            # Log the first plan combination if available\n            if response.get(\"plan_combinations\"):\n                first_plan = response[\"plan_combinations\"][0]\n                logger.info(f\"First plan hotel: {json.dumps(first_plan.get('hotel', {}), indent=2)}\")\n                logger.info(f\"First plan activities: {json.dumps(first_plan.get('activities', []), indent=2)}\")\n                logger.info(f\"First plan landmarks: {json.dumps(first_plan.get('landmarks', []), indent=2)}\")\n            \n            return PlanResponse(plan_combinations=response.get(\"plan_combinations\", []))\n        except Exception as e:\n            logger.error(f\"Error generating plan: {str(e)}\")\n            return None\n\n    def _format_and_send_plans(self, dispatcher: CollectingDispatcher, plans: List[Plan]) -> None:\n        for i, plan in enumerate(plans, 1):\n            message = f\"Plan {i}:\\n\\n\"\n            \n            # Hotel information\n            message += f\"\uD83C\uDFE8 Hotel: {plan.hotel.hotel_name}\\n\"\n            message += f\"   Price per night: ${plan.hotel.price_per_night}\\n\"\n            message += f\"   Facilities: {', '.join(plan.hotel.facilities)}\\n\\n\"\n            \n            # Activities\n            if plan.activities:\n                message += \"\uD83C\uDFAF Activities:\\n\"\n                for activity in plan.activities:\n                    message += f\"   • {activity.name}\\n\"\n                    message += f\"     Duration: {activity.duration} hours\\n\"\n                    message += f\"     Price: ${activity.price}\\n\"\n                    message += f\"     Description: {activity.description}\\n\"\n            else:\n                message += \"No activities included in this plan.\\n\"\n            \n            # Landmarks\n            if plan.landmarks:\n                message += \"\\n\uD83C\uDFDB\uFE0F Landmarks:\\n\"\n                for landmark in plan.landmarks:\n                    message += f\"   • {landmark.name}\\n\"\n                    message += f\"     Price: ${landmark.price}\\n\"\n                    message += f\"     Description: {landmark.description}\\n\"\n            else:\n                message += \"\\nNo landmarks included in this plan.\\n\"\n            \n            message += f\"\\n\uD83D\uDCB0 Total Cost: ${plan.total_plan_cost}\\n\"\n            message += \"─\" * 50 + \"\\n\"\n            \n            # Convert a Plan object to dictionary for JSON serialization\n            plan_dict = {\n                \"hotel\": plan.hotel.dict(),\n                \"activities\": [activity.dict() for activity in plan.activities],\n                \"landmarks\": [landmark.dict() for landmark in plan.landmarks],\n                \"total_plan_cost\": plan.total_plan_cost,\n            }\n            \n            dispatcher.utter_message(message, json_message=json.dumps(plan_dict, indent=2))\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/actions/suggest_plan_action.py b/actions/suggest_plan_action.py
--- a/actions/suggest_plan_action.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/actions/suggest_plan_action.py	(date 1749796266747)
@@ -173,7 +173,7 @@
         try:
             response = client._make_request(
                 "POST",
-                "/hotels/search",
+                "/hotels/recommend",
                 json={
                     "city_name": city_name,
                     "duration": duration,
@@ -200,7 +200,7 @@
         try:
             response = client._make_request(
                 "POST",
-                "/activities/search",
+                "/activities/recommend",
                 json={
                     "city_name": city_name,
                     "user_message": user_message or "",
@@ -223,7 +223,7 @@
         try:
             response = client._make_request(
                 "POST",
-                "/landmarks/search",
+                "/landmarks/recommend",
                 json={
                     "city_name": city_name,
                     "user_message": user_message or "",
@@ -254,7 +254,7 @@
                 "suggested_landmarks": [landmark.dict() for landmark in landmarks]
             }
             
-            response = client._make_request("POST", "/api/plans", json=request_payload)
+            response = client._make_request("POST", "/api/plans/recommend", json=request_payload)
 
             
             # Log the first plan combination if available
Index: APIs/recommendation_APIs/activities_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIs/recommendation_APIs/activities_api.py b/APIs/recommendation_APIs/activities_api.py
deleted file mode 100644
--- a/APIs/recommendation_APIs/activities_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ /dev/null	(revision 65afd03d54365f9bd4047233bede59f479d268df)
@@ -1,129 +0,0 @@
-import requests
-from config_helper import get_db_params, get_api_urls
-from fastapi import APIRouter, HTTPException
-from contextlib import contextmanager
-import psycopg2
-from psycopg2 import pool
-from pydantic import BaseModel
-from typing import List
-import time
-import logging
-
-router = APIRouter()
-logger = logging.getLogger(__name__)
-
-EMBEDDING_API_URL = get_api_urls().get('embedding')
-DB_Prams = get_db_params()
-ACTIVITY_QUERY = """
-    SELECT activity_id, A.name, A.description, 1 - (A.embedding <=> %s::vector) AS similarity , price , A.duration_in_hours
-    FROM activities A 
-    JOIN states S ON A.state_id = S.state_id
-    WHERE lower(S.name) LIKE %s 
-    ORDER BY similarity desc limit 50
-"""
-
-
-# Create a connection pool
-connection_pool = pool.ThreadedConnectionPool(
-    minconn=1,
-    maxconn=10,
-    **DB_Prams
-)
-
-class ActivityRequestByText(BaseModel):
-    city_name: str
-    user_message: str
-    preferred_activities: List[str]
-
-@router.post("/search")
-def get_activities(request: ActivityRequestByText):
-    try:
-        with get_db_connection() as conn:
-            # Search for Activities by user message
-            activities_by_message = get_activities_by_text(conn, request.city_name, request.user_message)
-
-            # Search for Activities by user activities
-            activities_by_user_activities = []
-            if request.preferred_activities:
-                activities_by_user_activities = get_activities_by_user_activities(conn, request.city_name, request.preferred_activities)
-
-            activity_list = activities_by_message + activities_by_user_activities
-
-            # remove duplicates
-            activity_list = list({activity['id']: activity for activity in activity_list}.values())
-            # sort by similarity
-            activity_list.sort(key=lambda x: x['score'], reverse=True)
-
-            return {"activities": activity_list}
-    except Exception as e:
-        logger.error(f"Error in get_activities: {str(e)}")
-        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
-
-
-@contextmanager
-def get_db_connection():
-    conn = None
-    max_retries = 3
-    retry_delay = 1  # seconds
-
-    for attempt in range(max_retries):
-        try:
-            conn = connection_pool.getconn()
-            yield conn
-            break
-        except psycopg2.OperationalError as e:
-            logger.error(f"Database connection attempt {attempt + 1} failed: {str(e)}")
-            if attempt == max_retries - 1:
-                raise HTTPException(status_code=500, detail="Database connection failed after multiple attempts")
-            time.sleep(retry_delay)
-            retry_delay *= 2
-        finally:
-            if conn:
-                try:
-                    connection_pool.putconn(conn)
-                except Exception as e:
-                    logger.error(f"Error returning connection to pool: {str(e)}")
-
-
-def convert_row_to_dict(row: tuple):
-    ret = {
-        "id": row[0],
-        "name": row[1],
-        "description": row[2],
-        "score": row[3],
-        "price": row[4],
-        'duration': row[5]
-    }
-    return ret
-
-
-def get_embedding(text: str) -> List[float]:
-    response = requests.post(EMBEDDING_API_URL, json={"text": text})
-    if response.status_code != 200:
-        raise HTTPException(status_code=500, detail="Error getting embedding")
-    return response.json().get("embedding")
-
-def get_activities_by_text(conn, city_name, user_massage):
-    with conn.cursor() as cursor:
-        # get the embedding for the user message
-        embedding = get_embedding(user_massage)
-        cursor.execute(ACTIVITY_QUERY, (embedding, '%' + city_name.lower() + '%', ))
-        result = cursor.fetchall()
-        result= [convert_row_to_dict(row) for row in result]
-
-        return result
-
-def get_activities_by_user_activities(conn, city_name, user_activities):
-    activities_list = []
-    with conn.cursor() as cursor:
-        for activity in user_activities:
-            # get the embedding for the activity
-            embedding = get_embedding(activity)
-            cursor.execute(ACTIVITY_QUERY, (embedding, '%' + city_name.lower() + '%',))
-            activities_list.extend(convert_row_to_dict(row) for row in cursor.fetchall())
-        activities_list = list({activity['id']: activity for activity in activities_list}.values())
-
-        return activities_list
-
-
-
Index: APIs/recommendation_APIs/plans_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIs/recommendation_APIs/plans_api.py b/APIs/recommendation_APIs/plans_api.py
deleted file mode 100644
--- a/APIs/recommendation_APIs/plans_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ /dev/null	(revision 65afd03d54365f9bd4047233bede59f479d268df)
@@ -1,122 +0,0 @@
-import heapq
-import requests
-from APIs.test_recommendaaation_model import calculate_similarity
-from config_helper import get_db_params, get_api_urls
-from fastapi import APIRouter, HTTPException
-from contextlib import contextmanager
-import psycopg2
-from pydantic import BaseModel
-from typing import List
-
-router = APIRouter()
-
-class PlanRequest(BaseModel):
-    city_name: str
-    budget: float
-    duration: int
-    suggested_hotels: List[dict]
-    suggested_activities: List[dict]
-    suggested_landmarks: List[dict]
-
-def search_optimal_items(budget, activity_landmark_options):
-    scale = 100
-
-    max_b= int(budget*scale)+1
-    dp=[0]*max_b
-    selected_options=[[] for _ in range(max_b)]
-    for option in activity_landmark_options:
-        price = int(option['price']*scale)
-        if price <= 0:
-            continue
-        for b in range(max_b-1,price-1,-1):
-            new_value=dp[b-price]+option['score']
-            if new_value>dp[b]:
-                dp[b]=new_value
-                selected_options[b]=selected_options[b-price]+[option]
-    max_value = 0
-    max_index = 0
-    for i in range(max_b):
-        if dp[i]>max_value:
-            max_value=dp[i]
-            max_index=i
-    return max_value,selected_options[max_index]
-
-def seperate_activities_landmarks(selected_options,activities,landmarks):
-    activities_options=[item for item in selected_options if item in activities]
-    landmarks_options=[item for item in selected_options if item in landmarks]
-    return activities_options[:5],landmarks_options[:5]
-def calculate_similarity(comb1, comb2):
-    hotel_overlap = int(comb1['hotel']['hotel_id'] == comb2['hotel']['hotel_id'])
-    activity_overlap = len(set(a['id'] for a in comb1['activities']) & set(a['id'] for a in comb2['activities']))
-    landmark_overlap = len(set(l['id'] for l in comb1['landmarks']) & set(l['id'] for l in comb2['landmarks']))
-    return hotel_overlap + activity_overlap + landmark_overlap
-
-
-
-def find_best_plan_options(hotels, activities, landmarks, budget, duration):
-   activity_landmark_options = activities + landmarks
-   for item_list in activity_landmark_options:
-        for key,item in item_list.items():
-            if key=='price'and item is None:
-                item_list['price'] = 0.0
-   best_options = []
-   activity_landmark_options.sort(key=lambda x: x['score'], reverse=True)
-   for hotel in hotels:
-       hotel['price_per_night'] *= duration
-       remaining_budget = budget - hotel['price_per_night']
-       if remaining_budget <= 0:
-           continue
-       options_score,selected_options = search_optimal_items(remaining_budget, activity_landmark_options)
-       options_cost=sum( a["price"]for a in selected_options)
-       total_cost = options_cost+ hotel['price_per_night']
-       total_score = options_score+hotel['score']
-       activities_options,landmarks_options=seperate_activities_landmarks(selected_options,activities,landmarks)
-
-       plan_combination = {
-           "hotel": hotel,
-           "activities": activities_options,
-           "landmarks": landmarks_options,
-           "total_score": total_score,
-           "total_plan_cost": total_cost
-       }
-       if len(best_options) < 3:
-            heapq.heappush(best_options,  (total_score, plan_combination))
-       elif total_score > best_options[0][0]:
-           heapq.heappushpop(best_options, (total_score,plan_combination))
-
-
-   suggestion=[item[1] for item in sorted(best_options,key=lambda  x:x[0],reverse=True)]
-   
-   return suggestion
-
-
-
-@router.post("")
-def create_plan(request: PlanRequest):
-    plan_combinations = find_best_plan_options(
-        request.suggested_hotels,
-        request.suggested_activities,
-        request.suggested_landmarks,
-        request.budget,
-        request.duration
-    )
-    displayed_plan_combinations = []
-    for plan_combination in plan_combinations:
-        temp = {}
-        for key, value in plan_combination.items():
-            if key == 'total_score':
-                continue
-
-            if key == 'hotel':
-                # Keep all hotel fields
-                temp[key] = value
-            elif key in ['activities', 'landmarks']:
-                # Keep all fields for activities and landmarks
-                temp[key] = value
-            else:
-                # Handle other keys normally
-                temp[key] = value
-
-        displayed_plan_combinations.append(temp)
-    return {"plan_combinations": displayed_plan_combinations}
-
Index: APIs/recommendation_APIs/hotels_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIs/recommendation_APIs/hotels_api.py b/APIs/recommendation_APIs/hotels_api.py
deleted file mode 100644
--- a/APIs/recommendation_APIs/hotels_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ /dev/null	(revision 65afd03d54365f9bd4047233bede59f479d268df)
@@ -1,203 +0,0 @@
-from rapidfuzz import fuzz
-from config_helper import get_db_params
-from fastapi import APIRouter, HTTPException
-import psycopg2
-from psycopg2 import pool
-from pydantic import BaseModel
-from typing import List
-import math
-import logging
-import time
-
-router = APIRouter()
-logger = logging.getLogger(__name__)
-
-DB_Prams = get_db_params()
-
-# Create a connection pool
-connection_pool = pool.ThreadedConnectionPool(
-    minconn=1,
-    maxconn=10,
-    **DB_Prams
-)
-
-def best_match_score(query, choices):
-    scores = []
-    for choice in choices:
-        score = max(
-            fuzz.ratio(query, choice),
-            fuzz.partial_ratio(query, choice),
-            fuzz.token_sort_ratio(query, choice),
-            fuzz.token_set_ratio(query, choice)
-        )
-        scores.append((choice, score))
-    best = max(scores, key=lambda x: x[1])
-    return best
-
-def get_facilities_ids(conn, user_facilities):
-    try:
-        with conn.cursor() as cur:
-            select_query = """SELECT facility_id , name from hotel_facilities """
-            cur.execute(select_query,)
-            facilities_ids = cur.fetchall()
-            # search for the facilities in the rooms
-            select_query = """SELECT room_facility_id, name FROM room_facilities"""
-            cur.execute(select_query)
-            room_facilities= cur.fetchall()
-            all_facilities =  facilities_ids + room_facilities
-            facilities_names = [facility[1] for facility in all_facilities]
-            facilities_dic = {}
-            # Use fuzzy matching to find the best match for each user facility
-            for user_facility in user_facilities:
-                match, best_match = best_match_score(user_facility.lower(), [name.lower() for name in facilities_names])
-                logger.info(f"Facility matching: {match}, {best_match}, {user_facility}")
-                if  best_match >= 80:
-                    for f_id, name in all_facilities:
-                        if name.lower() == match:
-                            facilities_dic[user_facility] = f_id
-                            break
-
-            return facilities_dic
-    except Exception as e:
-        logger.error(f"Error in get_facilities_ids: {str(e)}")
-        raise HTTPException(status_code=500, detail=f"Error getting facilities: {str(e)}")
-
-def get_hotels_facilities(conn, city_name, facilities_ids, price_limit_per_night):
-    try:
-        with conn.cursor() as cur:
-            select_query = '''SELECT h.hotel_id, h.name, r.total_price,h.longitude,h.latitude,hf.facility_id, hf.name
-                            FROM hotels h
-                            JOIN hotels_facilities_rel hfr ON h.hotel_id = hfr.hotel_id
-                            JOIN hotel_facilities hf ON hfr.facility_id = hf.facility_id
-                            JOIN rooms r ON h.hotel_id = r.hotel_id
-                            JOIN states s ON h.state_id = s.state_id
-                            WHERE lower(s.name) LIKE %s and hf.facility_id = ANY(%s)
-                            and r.total_price <= %s limit 10'''
-            cur.execute(select_query, ('%' + city_name.lower() + '%',facilities_ids, price_limit_per_night))
-            result = cur.fetchall()
-            hotels = {}
-            for hotel in result:
-                if hotel[0] not in hotels:
-                    hotels[hotel[0]]={
-                        "hotel_id": hotel[0],
-                        "hotel_name": hotel[1],
-                        "price_per_night": hotel[2],
-                        "longitude": hotel[3],
-                        "latitude": hotel[4],
-                        "facilities_ids": set(),
-                        "facilities": set()
-                    }
-                hotels[hotel[0]]["facilities_ids"].add(hotel[5])
-                hotels[hotel[0]]["facilities"].add(hotel[6])
-
-            return hotels
-    except Exception as e:
-        logger.error(f"Error in get_hotels_facilities: {str(e)}")
-        raise HTTPException(status_code=500, detail=f"Error getting hotels: {str(e)}")
-
-def calculate_matching_score(hotel_facilities, user_facilities):
-    try:
-        total_user_facilities = len(user_facilities)
-        # Calculate the minimum and maximum price for normalization
-        prices = [hotel["price_per_night"] for hotel in hotel_facilities.values()
-                        if  not math.isnan(hotel["price_per_night"])]
-        min_price = min(prices) if prices else 0
-        max_price = max(prices) if prices else 0
-        alpha= 0.7
-        beta=0.3
-
-        for hotel_id,hotel_data in hotel_facilities.items():
-            matched_facilities = hotel_data["facilities"].intersection(user_facilities)
-            matching_score = len(matched_facilities) / total_user_facilities if total_user_facilities else 0
-
-            # Normalize the price to a score between 0 and 1
-            if math.isnan(hotel_data["price_per_night"])  or max_price == min_price:
-                normalized_price = 0.0
-            else:
-                normalized_price = 1 - (hotel_data["price_per_night"] - min_price) / (max_price - min_price)
-
-            # Calculate the final score
-            normalized_score= alpha * matching_score + beta * normalized_price
-
-            hotel_data["score"] = normalized_score
-
-        # Sort hotels by matching score in descending order
-        sorted_hotels = sorted(hotel_facilities.values(), key=lambda x: x["score"], reverse=True)
-        return sorted_hotels
-    except Exception as e:
-        logger.error(f"Error in calculate_matching_score: {str(e)}")
-        raise HTTPException(status_code=500, detail=f"Error calculating scores: {str(e)}")
-
-class HotelRequest(BaseModel):
-    city_name: str
-    duration: int
-    budget: float
-    user_facilities: List[str]
-
-@router.post("/search")
-def get_hotels(request: HotelRequest):
-    conn = None
-    try:
-        logger.info(f"Received request for city: {request.city_name}, facilities: {request.user_facilities}")
-        
-        # Get connection from pool with retry logic
-        max_retries = 3
-        retry_delay = 1
-        for attempt in range(max_retries):
-            try:
-                conn = connection_pool.getconn()
-                break
-            except psycopg2.OperationalError as e:
-                logger.error(f"Database connection attempt {attempt + 1} failed: {str(e)}")
-                if attempt == max_retries - 1:
-                    raise HTTPException(status_code=500, detail="Database connection failed after multiple attempts")
-                time.sleep(retry_delay)
-                retry_delay *= 2
-
-        # get all the hotels in the city with the user preferences
-        facilities_ids = get_facilities_ids(conn, request.user_facilities)
-        logger.info(f"Found facilities IDs: {facilities_ids}")
-        
-        if not facilities_ids:
-            raise HTTPException(status_code=400, detail="No matching facilities found for the provided preferences")
-            
-        price_limit_per_night = request.budget / request.duration
-        logger.info(f"Price limit per night: {price_limit_per_night}")
-        
-        hotels_facilitates = get_hotels_facilities(conn, request.city_name, list(facilities_ids.values()), price_limit_per_night)
-        logger.info(f"Found hotels with facilities: {len(hotels_facilitates)}")
-        
-        if not hotels_facilitates:
-            raise HTTPException(status_code=404, detail=f"No hotels found in {request.city_name} matching your criteria")
-            
-        # calculate the matching score for each hotel
-        sorted_hotels = calculate_matching_score(hotels_facilitates, set(request.user_facilities))
-
-        hotels = []
-        for hotel in sorted_hotels:
-            hotel_data = {
-                'hotel_id': hotel['hotel_id'],
-                "hotel_name": hotel["hotel_name"],
-                "longitude": hotel["longitude"],
-                "latitude": hotel["latitude"],
-                "facilities": list(hotel["facilities"]),
-                "score": hotel["score"]
-            }
-
-            # Handle NaN values in price
-            if math.isnan(hotel["price_per_night"]):
-                hotel_data["price_per_night"] = None
-            else:
-                hotel_data["price_per_night"] = hotel["price_per_night"]
-
-            hotels.append(hotel_data)
-        return {"hotels": hotels}
-    except Exception as e:
-        logger.error(f"Error in get_hotels: {str(e)}")
-        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
-    finally:
-        if conn:
-            try:
-                connection_pool.putconn(conn)
-            except Exception as e:
-                logger.error(f"Error returning connection to pool: {str(e)}")
\ No newline at end of file
Index: APIs/recommendation_APIs/combined_api.py
===================================================================
diff --git a/APIs/recommendation_APIs/combined_api.py b/APIs/recommendation_APIs/combined_api.py
deleted file mode 100644
--- a/APIs/recommendation_APIs/combined_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ /dev/null	(revision 65afd03d54365f9bd4047233bede59f479d268df)
@@ -1,32 +0,0 @@
-from fastapi import FastAPI
-from fastapi.middleware.cors import CORSMiddleware
-from config_helper import get_api_urls
-
-# Import all the routers
-from .cities_api import router as cities_router
-from .hotels_api import router as hotels_router
-from .activities_api import router as activities_router
-from .plans_api import router as plans_router
-from .landmarks_api import router as landmarks_router
-
-app = FastAPI()
-
-# Add CORS middleware
-app.add_middleware(
-    CORSMiddleware,
-    allow_origins=["*"],  # You can restrict this to specific origins
-    allow_credentials=True,
-    allow_methods=["*"],
-    allow_headers=["*"],
-)
-
-# Include all routers with their prefixes
-app.include_router(cities_router, prefix="/api/cities", tags=["Cities"])
-app.include_router(hotels_router, prefix="/api/hotels", tags=["Hotels"])
-app.include_router(activities_router, prefix="/api/activities", tags=["Activities"])
-app.include_router(plans_router, prefix="/api/plans", tags=["Plans"])
-app.include_router(landmarks_router, prefix="/api/landmarks", tags=["Landmarks"])
-
-if __name__ == "__main__":
-    import uvicorn
-    uvicorn.run(app, host="0.0.0.0", port=8002) 
\ No newline at end of file
Index: APIs/recommendation_APIs/landmarks_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIs/recommendation_APIs/landmarks_api.py b/APIs/recommendation_APIs/landmarks_api.py
deleted file mode 100644
--- a/APIs/recommendation_APIs/landmarks_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ /dev/null	(revision 65afd03d54365f9bd4047233bede59f479d268df)
@@ -1,125 +0,0 @@
-import requests
-from config_helper import get_db_params, get_api_urls
-from fastapi import APIRouter, HTTPException
-from contextlib import contextmanager
-import psycopg2
-from psycopg2 import pool
-from pydantic import BaseModel
-from typing import List
-import time
-import logging
-
-router = APIRouter()
-logger = logging.getLogger(__name__)
-
-EMBEDDING_API_URL = get_api_urls().get('embedding')
-DB_Prams = get_db_params()
-
-LANDMARK_QUERY = """
-    SELECT landmark_id, L.name, L.description, 1 - (L.embedding <=> %s::vector) AS similarity, price_foreign, L.longitude, L.latitude
-    FROM landmarks L join states S on L.state_id = S.state_id
-    WHERE lower(S.name) LIKE %s
-    ORDER BY similarity desc
-   """
-
-# Create a connection pool
-connection_pool = pool.ThreadedConnectionPool(
-    minconn=1,
-    maxconn=10,
-    **DB_Prams
-)
-
-class LandmarksRequestByText(BaseModel):
-    city_name: str
-    user_message: str
-    preferred_landmarks: List[str]
-
-@router.post("/search")
-def get_landmarks(request: LandmarksRequestByText):
-    try:
-        with get_db_connection() as conn:
-            # Search for Landmarks by user message
-            landmarks_by_message = get_landmark_by_text(conn, request.city_name, request.user_message)
-
-            # Search for Landmarks by user activities
-            landmarks_by_user_activities = []
-            if request.preferred_landmarks:
-                landmarks_by_user_activities = get_landmark_by_user_activities(conn, request.city_name, request.preferred_landmarks)
-
-            landmark_list = landmarks_by_message + landmarks_by_user_activities
-
-            # remove duplicates
-            landmark_list = list({landmark['id']: landmark for landmark in landmark_list}.values())
-            # sort by similarity
-            landmark_list.sort(key=lambda x: x['score'], reverse=True)
-
-            return {"landmarks": landmark_list}
-    except Exception as e:
-        logger.error(f"Error in get_landmarks: {str(e)}")
-        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
-
-
-@contextmanager
-def get_db_connection():
-    conn = None
-    max_retries = 3
-    retry_delay = 1
-    for attempt in range(max_retries):
-        try:
-            conn = connection_pool.getconn()
-            yield conn
-            break
-        except psycopg2.OperationalError as e:
-            logger.error(f"Database connection attempt {attempt + 1} failed: {str(e)}")
-            if attempt == max_retries - 1:
-                raise HTTPException(status_code=500, detail="Database connection failed after multiple attempts")
-            time.sleep(retry_delay)
-            retry_delay *= 2
-        finally:
-            if conn:
-                try:
-                    connection_pool.putconn(conn)
-                except Exception as e:
-                    logger.error(f"Error returning connection to pool: {str(e)}")
-
-
-def convert_row_to_dict(row: tuple, kind):
-    ret = {
-        "id": row[0],
-        "name": row[1],
-        "description": row[2],
-        "score": row[3],
-        "price": row[4]
-    }
-    if kind == 'a':
-        ret['duration'] = row[5]
-    else:
-        ret['longitude'] = row[5]
-        ret['latitude'] = row[6]
-    return ret
-
-
-def get_embedding(text: str) -> List[float]:
-    response = requests.post(EMBEDDING_API_URL, json={"text": text})
-    if response.status_code != 200:
-        raise HTTPException(status_code=500, detail="Error getting embedding")
-    return response.json().get("embedding")
-
-def get_landmark_by_text(conn, city_name, user_massage):
-    with conn.cursor() as cursor:
-        # get the embedding for the user message
-        embedding = get_embedding(user_massage)
-        cursor.execute(LANDMARK_QUERY, (embedding, '%' + city_name.lower() + '%', ))
-        result = cursor.fetchall()
-        return [convert_row_to_dict(row,'l') for row in result]
-def get_landmark_by_user_activities(conn, city_name, user_activities):
-    landmarks_list = []
-    with conn.cursor() as cursor:
-        for landmark in user_activities:
-            # get the embedding for the activity
-            embedding = get_embedding(landmark)
-            cursor.execute(LANDMARK_QUERY, (embedding, '%' + city_name.lower() + '%',))
-            landmarks_list.extend(convert_row_to_dict(row,'l') for row in cursor.fetchall())
-        return list({landmark['id']: landmark for landmark in landmarks_list}.values())
-
-
Index: APIs/recommendation_APIs/cities_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIs/recommendation_APIs/cities_api.py b/APIs/recommendation_APIs/cities_api.py
deleted file mode 100644
--- a/APIs/recommendation_APIs/cities_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ /dev/null	(revision 65afd03d54365f9bd4047233bede59f479d268df)
@@ -1,166 +0,0 @@
-from typing import List
-import requests
-from pydantic import BaseModel
-from config_helper import get_db_params, get_api_urls
-from fastapi import APIRouter, HTTPException
-import psycopg2
-import re
-import json
-
-router = APIRouter()
-
-EMBEDDING_API_URL = get_api_urls().get('embedding')
-DB_Prams = get_db_params()
-
-# Define common features and their keywords with weights
-FEATURES = {
-    'sea': {
-        'keywords': ['sea', 'beach', 'coast', 'shore', 'ocean', 'mediterranean', 'red sea'],
-        'weight': 1.5  # Higher weight for sea-related features
-    },
-    'desert': {
-        'keywords': ['desert', 'sahara', 'sand', 'oasis'],
-        'weight': 1.2
-    },
-    'historical': {
-        'keywords': ['historical', 'ancient', 'pharaonic', 'temple', 'pyramid', 'museum'],
-        'weight': 1.3
-    },
-    'modern': {
-        'keywords': ['modern', 'city', 'urban', 'metropolitan'],
-        'weight': 1.1
-    },
-    'nature': {
-        'keywords': ['nature', 'garden', 'park', 'river', 'nile'],
-        'weight': 1.2
-    },
-    'religious': {
-        'keywords': ['mosque', 'church', 'religious', 'spiritual'],
-        'weight': 1.1
-    }
-}
-
-class CityRequest(BaseModel):
-    city_description: str
-    city_features: List[str] = []
-
-def extract_features(text: str) -> list:
-    """Extract relevant features from the text with their weights."""
-    text = text.lower()
-    found_features = []
-    for feature, data in FEATURES.items():
-        if any(keyword in text for keyword in data['keywords']):
-            found_features.append({
-                'name': feature,
-                'weight': data['weight']
-            })
-    return found_features
-
-@router.post("/search")
-async def get_cities(request: CityRequest):
-    try:
-        city_description = request.city_description
-        if not city_description:
-            raise HTTPException(status_code=400, detail="City description cannot be empty")
-            
-        conn = None
-        cur = None
-        try:
-            conn = psycopg2.connect(**DB_Prams)
-            cur = conn.cursor()
-            
-            # Extract features from the description
-            features = extract_features(city_description)
-            
-            # Get the user messages embedding
-            embedding_response = requests.post(EMBEDDING_API_URL, json={"text": city_description})
-            
-            if embedding_response.status_code != 200:
-                raise HTTPException(status_code=500, detail="Failed to get embedding from embedding service")
-            
-            try:
-                user_msgs_embedding = embedding_response.json()
-                if "embedding" not in user_msgs_embedding:
-                    raise HTTPException(status_code=500, detail="Invalid embedding response format")
-            except json.JSONDecodeError:
-                raise HTTPException(status_code=500, detail="Invalid JSON response from embedding service")
-            
-            # Base query with semantic similarity
-            base_query = """
-                WITH city_scores AS (
-                    SELECT 
-                        name, 
-                        description,
-                        longitude,
-                        latitude,
-                        1 - (embedding <=> %s::vector) AS semantic_similarity,
-                        CASE 
-            """
-            
-            # Add feature-based scoring
-            if features:
-                feature_conditions = []
-                for feature in features:
-                    feature_name = feature['name']
-                    weight = feature['weight']
-                    keywords = FEATURES[feature_name]['keywords']
-                    keyword_conditions = " OR ".join([f"description ILIKE %s OR name ILIKE %s" for _ in keywords])
-                    feature_conditions.append(f"WHEN ({keyword_conditions}) THEN {weight}")
-                base_query += "\n".join(feature_conditions)
-            else:
-                base_query += "WHEN 1=1 THEN 1"
-                
-            base_query += """
-                        ELSE 1
-                        END as feature_score
-                    FROM states
-                )
-                SELECT 
-                    name,
-                    description,
-                    longitude,
-                    latitude,
-                    (semantic_similarity * 0.7 + feature_score * 0.3) as combined_score
-                FROM city_scores
-                ORDER BY combined_score DESC
-                LIMIT 3
-            """
-            
-            # Prepare parameters for the query
-            params = [user_msgs_embedding["embedding"]]
-            if features:
-                for feature in features:
-                    feature_name = feature['name']
-                    keywords = FEATURES[feature_name]['keywords']
-                    for keyword in keywords:
-                        params.extend([f'%{keyword}%', f'%{keyword}%'])
-            
-            # Execute the query
-            cur.execute(base_query, params)
-            cities = cur.fetchall()
-
-            if len(cities) < 3:
-                return {"top_cities": [], "message": "No cities found matching your description"}
-            
-            cities_list = [{
-                "name": city[0],
-                "description": city[1],
-                "longitude": city[2],
-                "latitude": city[3],
-            } for city in cities]
-            
-            return {"top_cities": cities_list}
-
-        except Exception as e:
-            raise HTTPException(status_code=500, detail=str(e))
-        finally:
-            if cur:
-                cur.close()
-            if conn:
-                conn.close()
-    except Exception as e:
-        raise HTTPException(status_code=500, detail=str(e))
-
-
-
-
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>rasa==3.6.21\nrasa-sdk==3.6.2\nrequests==2.32.3\nword2number==1.1\nrapidfuzz==3.9.7\n\npsycopg2-binary==2.9.5\nSQLAlchemy==1.4.54\n\nsentence-transformers>=2.2.2\npandas==2.0.3\nnumpy==1.23.5\n\nfastapi>=0.100.0\nuvicorn>=0.23.0\nwebsockets==10.4\naiohttp==3.9.5\naiofiles==24.1.0\npython-dateutil==2.8.2\nipython==7.34.0\nprompt-toolkit==3.0.38\npackaging==20.9\nipykernel>=6.0.0\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/requirements.txt	(date 1749796266756)
@@ -21,3 +21,12 @@
 prompt-toolkit==3.0.38
 packaging==20.9
 ipykernel>=6.0.0
+
+anyio~=4.5.2
+pydantic~=1.10.9
+scikit-learn~=1.1.3
+PyYAML~=6.0.2
+streamlit~=1.40.1
+torch~=2.4.1
+datasets~=3.1.0
+matplotlib~=3.5.3
\ No newline at end of file
Index: APIs/recommendation_system/landmarks_api.py
===================================================================
diff --git a/APIs/recommendation_system/landmarks_api.py b/APIs/recommendation_system/landmarks_api.py
new file mode 100644
--- /dev/null	(date 1749796266599)
+++ b/APIs/recommendation_system/landmarks_api.py	(date 1749796266599)
@@ -0,0 +1,199 @@
+import aiohttp
+from config_helper import get_db_params, get_api_urls
+from fastapi import APIRouter, HTTPException
+from contextlib import asynccontextmanager
+import psycopg2
+from psycopg2 import pool
+from pydantic import BaseModel, Field
+from typing import List, Dict, Any
+import time
+import logging
+
+router = APIRouter()
+logger = logging.getLogger(__name__)
+
+EMBEDDING_API_URL = get_api_urls().get('embedding')
+DB_Prams = get_db_params()
+
+LANDMARK_QUERY = """
+    SELECT landmark_id, L.name, L.description, 1 - (L.embedding <=> %s::vector) AS similarity, price_foreign, L.longitude, L.latitude
+    FROM landmarks L join states S on L.state_id = S.state_id
+    WHERE lower(S.name) LIKE %s
+    ORDER BY similarity desc
+   """
+
+# Create a connection pool
+connection_pool = pool.ThreadedConnectionPool(
+    minconn=1,
+    maxconn=10,
+    **DB_Prams
+)
+
+class LandmarksRequestByText(BaseModel):
+    city_name: str = Field(..., min_length=1, description="Name of the city")
+    user_message: str = Field(..., min_length=1, description="User's message for landmark search")
+    preferred_landmarks: List[str] = Field(default_factory=list, description="List of preferred landmarks")
+
+class LandmarkResponse(BaseModel):
+    id: int
+    name: str 
+    description: str
+    score: float 
+    price: float 
+    longitude: float 
+    latitude: float 
+
+@asynccontextmanager
+async def get_db_connection():
+    """Get a database connection from the pool with retry logic."""
+    conn = None
+    max_retries = 3
+    retry_delay = 1
+    for attempt in range(max_retries):
+        try:
+            conn = connection_pool.getconn()
+            yield conn
+            break
+        except psycopg2.OperationalError as e:
+            logger.error(f"Database connection attempt {attempt + 1} failed: {str(e)}")
+            if attempt == max_retries - 1:
+                raise HTTPException(status_code=500, detail="Database connection failed after multiple attempts")
+            await asyncio.sleep(retry_delay)
+            retry_delay *= 2
+        finally:
+            if conn:
+                try:
+                    connection_pool.putconn(conn)
+                except Exception as e:
+                    logger.error(f"Error returning connection to pool: {str(e)}")
+
+def convert_row_to_dict(row: tuple) -> Dict[str, Any]:
+    """Convert database row to dictionary format."""
+    try:
+        return {
+            "id": row[0],
+            "name": row[1],
+            "description": row[2],
+            "score": row[3],
+            "price": row[4],
+            "longitude": row[5],
+            "latitude": row[6]
+        }
+    except Exception as e:
+        logger.error(f"Error converting row to dict: {str(e)}")
+        raise
+
+async def get_embedding(text: str) -> List[float]:
+    """Get embedding for text using the embedding API."""
+    try:
+        if not text or not text.strip():
+            logger.warning("Empty text provided for embedding")
+            return None
+            
+        async with aiohttp.ClientSession() as session:
+            async with session.post(
+                EMBEDDING_API_URL,
+                json={"text": text},
+                timeout=10
+            ) as response:
+                if response.status == 200:
+                    result = await response.json()
+                    if 'embedding' not in result:
+                        logger.error(f"No embedding in response: {result}")
+                        return None
+                    return result['embedding']
+                else:
+                    logger.error(f"Error getting embedding: {response.status}")
+                    return None
+    except aiohttp.ClientTimeout:
+        logger.error("Embedding API request timed out")
+        return None
+    except aiohttp.ClientError as e:
+        logger.error(f"Error calling embedding API: {str(e)}")
+        return None
+    except Exception as e:
+        logger.error(f"Unexpected error getting embedding: {str(e)}")
+        return None
+
+async def get_landmark_by_text(conn, city_name: str, user_message: str) -> List[Dict[str, Any]]:
+    """Get landmarks based on user message similarity."""
+    try:
+        embedding = await get_embedding(user_message)
+        if not embedding:
+            return []
+            
+        with conn.cursor() as cursor:
+            cursor.execute(LANDMARK_QUERY, (embedding, '%' + city_name.lower() + '%'))
+            result = cursor.fetchall()
+            return [convert_row_to_dict(row) for row in result]
+    except Exception as e:
+        logger.error(f"Error in get_landmark_by_text: {str(e)}")
+        return []
+
+async def get_landmark_by_user_activities(conn, city_name: str, user_activities: List[str]) -> List[Dict[str, Any]]:
+    """Get landmarks based on user preferred activities."""
+    try:
+        landmarks_list = []
+        with conn.cursor() as cursor:
+            for activity in user_activities:
+                embedding = await get_embedding(activity)
+                if not embedding:
+                    continue
+                    
+                cursor.execute(LANDMARK_QUERY, (embedding, '%' + city_name.lower() + '%'))
+                landmarks_list.extend(convert_row_to_dict(row) for row in cursor.fetchall())
+                
+        # Remove duplicates while preserving order
+        return list({landmark['id']: landmark for landmark in landmarks_list}.values())
+    except Exception as e:
+        logger.error(f"Error in get_landmark_by_user_activities: {str(e)}")
+        return []
+
+@router.post("/recommend", response_model=Dict[str, List[LandmarkResponse]])
+async def get_landmarks(request: LandmarksRequestByText):
+    """
+    Search for landmarks based on user message and preferred activities.
+    
+    Args:
+        request: LandmarksRequestByText containing city name, user message, and preferred landmarks
+        
+    Returns:
+        Dictionary containing list of landmarks
+    """
+    try:
+        async with get_db_connection() as conn:
+            # Search for Landmarks by user message
+            landmarks_by_message = await get_landmark_by_text(conn, request.city_name, request.user_message)
+
+            # Search for Landmarks by user activities
+            landmarks_by_user_activities = []
+            if request.preferred_landmarks:
+                landmarks_by_user_activities = await get_landmark_by_user_activities(
+                    conn, request.city_name, request.preferred_landmarks
+                )
+
+            # Combine and deduplicate results
+            landmark_list = landmarks_by_message + landmarks_by_user_activities
+            landmark_list = list({landmark['id']: landmark for landmark in landmark_list}.values())
+            
+            # Sort by similarity score
+            landmark_list.sort(key=lambda x: x['score'], reverse=True)
+
+            if not landmark_list:
+                raise HTTPException(
+                    status_code=404,
+                    detail=f"No landmarks found for city: {request.city_name}"
+                )
+
+            return {"landmarks": landmark_list}
+            
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(f"Error in get_landmarks: {str(e)}")
+        raise HTTPException(
+            status_code=500,
+            detail="An error occurred while searching for landmarks"
+        )
+
+
Index: data/stories.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version: \"3.1\"\n\nstories:\n- story: direct city selection path\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n  - intent: share_state\n    entities:\n    - state: \"Luxor\"\n  - slot_was_set:\n    - state: \"Luxor\"\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: budget\n  - intent: share_budget\n    entities:\n    - budget: \"500 dollars\"\n  - slot_was_set:\n    - budget: 500\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: duration\n  - intent: share_duration\n    entities:\n    - duration: \"3 days\"\n  - slot_was_set:\n    - duration: 3\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: arrival_date\n  - intent: share_arrival_date\n    entities:\n    - arrival_date: \"next week\"\n  - slot_was_set:\n    - arrival_date: [\"2024-03-25\", \"2024-03-31\"]\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: hotel_features\n  - intent: share_hotel_features\n    entities:\n    - hotel_features: \"pool and wifi\"\n  - slot_was_set:\n    - hotel_features: [\"pool\", \"wifi\"]\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: landmarks_activities\n  - intent: share_landmarks_activities\n    entities:\n    - landmarks_activities: \"temples and museums\"\n  - slot_was_set:\n    - landmarks_activities: [\"temples\", \"museums\"]\n  - action: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- story: city description path\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n  - intent: deny\n  - slot_was_set:\n    - specify_place: false\n  - action: trip_form\n  - slot_was_set:\n    - requested_slot: city_description\n  - intent: describe_city\n    entities:\n    - city_description: \"historical city with ancient temples\"\n  - slot_was_set:\n    - city_description: \"historical city with ancient temples\"\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: state\n  - intent: share_state\n    entities:\n    - state: \"Luxor\"\n  - slot_was_set:\n    - state: \"Luxor\"\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: budget\n  - intent: share_budget\n    entities:\n    - budget: \"500 dollars\"\n  - slot_was_set:\n    - budget: 500\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: duration\n  - intent: share_duration\n    entities:\n    - duration: \"3 days\"\n  - slot_was_set:\n    - duration: 3\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: arrival_date\n  - intent: share_arrival_date\n    entities:\n    - arrival_date: \"next week\"\n  - slot_was_set:\n    - arrival_date: [\"2024-03-25\", \"2024-03-31\"]\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: hotel_features\n  - intent: share_hotel_features\n    entities:\n    - hotel_features: \"pool and wifi\"\n  - slot_was_set:\n    - hotel_features: [\"pool\", \"wifi\"]\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - requested_slot: landmarks_activities\n  - intent: share_landmarks_activities\n    entities:\n    - landmarks_activities: \"temples and museums\"\n  - slot_was_set:\n    - landmarks_activities: [\"temples\", \"museums\"]\n  - action: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- story: handle form interruption\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n  - intent: bot_challenge\n  - action: utter_iamabot\n  - action: trip_form\n  - active_loop: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- story: handle out of scope during form\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n  - intent: out_of_scope\n  - action: utter_out_of_scope\n  - action: trip_form\n  - active_loop: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- story: multiple entities in first message\n  steps:\n  - intent: request_trip\n    entities:\n    - state: \"Luxor\"\n    - budget: \"500 dollars\"\n    - duration: \"3 days\"\n  - action: trip_form\n  - active_loop: trip_form\n  - slot_was_set:\n    - state: \"Luxor\"\n    - budget: 500\n    - duration: 3\n  - action: trip_form\n  - active_loop: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- story: multiple entities in middle of form\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n  - intent: share_state\n    entities:\n    - state: \"Luxor\"\n  - slot_was_set:\n    - state: \"Luxor\"\n  - action: trip_form\n  - slot_was_set:\n    - requested_slot: budget\n  - intent: share_budget\n    entities:\n    - budget: \"500 dollars\"\n    - duration: \"5 days\"\n  - slot_was_set:\n    - budget: 500\n    - duration: 5\n  - action: trip_form\n  - active_loop: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n\n- story: out of order information\n  steps:\n  - intent: request_trip\n  - action: trip_form\n  - active_loop: trip_form\n  - intent: share_budget\n    entities:\n    - budget: \"500 dollars\"\n  - slot_was_set:\n    - budget: 500\n  - action: trip_form\n  - slot_was_set:\n    - requested_slot: state\n  - intent: share_state\n    entities:\n    - state: \"Luxor\"\n  - slot_was_set:\n    - state: \"Luxor\"\n  - action: trip_form\n  - active_loop: trip_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_start_suggestions\n  - action: action_suggest_plan\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/stories.yml b/data/stories.yml
--- a/data/stories.yml	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/data/stories.yml	(date 1749796266795)
@@ -11,13 +11,14 @@
     - state: "Luxor"
   - slot_was_set:
     - state: "Luxor"
+    - specify_place: true
   - action: trip_form
   - active_loop: trip_form
   - slot_was_set:
     - requested_slot: budget
   - intent: share_budget
     entities:
-    - budget: "500 dollars"
+    - budget: "500"
   - slot_was_set:
     - budget: 500
   - action: trip_form
@@ -62,6 +63,8 @@
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
 
 - story: city description path
   steps:
@@ -79,22 +82,26 @@
     - city_description: "historical city with ancient temples"
   - slot_was_set:
     - city_description: "historical city with ancient temples"
+    - suggested_cities: ["Luxor", "Aswan", "Cairo"]
+    - awaiting_city_selection: true
   - action: trip_form
   - active_loop: trip_form
   - slot_was_set:
-    - requested_slot: state
+    - requested_slot: selected_city
   - intent: share_state
     entities:
     - state: "Luxor"
   - slot_was_set:
     - state: "Luxor"
+    - selected_city: "Luxor"
+    - awaiting_city_selection: false
   - action: trip_form
   - active_loop: trip_form
   - slot_was_set:
     - requested_slot: budget
   - intent: share_budget
     entities:
-    - budget: "500 dollars"
+    - budget: "500"
   - slot_was_set:
     - budget: 500
   - action: trip_form
@@ -139,6 +146,8 @@
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
 
 - story: handle form interruption
   steps:
@@ -149,11 +158,65 @@
   - action: utter_iamabot
   - action: trip_form
   - active_loop: trip_form
+  - intent: share_state
+    entities:
+    - state: "Luxor"
+  - slot_was_set:
+    - state: "Luxor"
+    - specify_place: true
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: budget
+  - intent: share_budget
+    entities:
+    - budget: "500"
+  - slot_was_set:
+    - budget: 500
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: duration
+  - intent: share_duration
+    entities:
+    - duration: "3 days"
+  - slot_was_set:
+    - duration: 3
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: arrival_date
+  - intent: share_arrival_date
+    entities:
+    - arrival_date: "next week"
+  - slot_was_set:
+    - arrival_date: ["2024-03-25", "2024-03-31"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: hotel_features
+  - intent: share_hotel_features
+    entities:
+    - hotel_features: "pool and wifi"
+  - slot_was_set:
+    - hotel_features: ["pool", "wifi"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: landmarks_activities
+  - intent: share_landmarks_activities
+    entities:
+    - landmarks_activities: "temples and museums"
+  - slot_was_set:
+    - landmarks_activities: ["temples", "museums"]
+  - action: trip_form
   - active_loop: null
   - slot_was_set:
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
 
 - story: handle out of scope during form
   steps:
@@ -164,32 +227,115 @@
   - action: utter_out_of_scope
   - action: trip_form
   - active_loop: trip_form
+  - intent: share_state
+    entities:
+    - state: "Luxor"
+  - slot_was_set:
+    - state: "Luxor"
+    - specify_place: true
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: budget
+  - intent: share_budget
+    entities:
+    - budget: "500"
+  - slot_was_set:
+    - budget: 500
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: duration
+  - intent: share_duration
+    entities:
+    - duration: "3 days"
+  - slot_was_set:
+    - duration: 3
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: arrival_date
+  - intent: share_arrival_date
+    entities:
+    - arrival_date: "next week"
+  - slot_was_set:
+    - arrival_date: ["2024-03-25", "2024-03-31"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: hotel_features
+  - intent: share_hotel_features
+    entities:
+    - hotel_features: "pool and wifi"
+  - slot_was_set:
+    - hotel_features: ["pool", "wifi"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: landmarks_activities
+  - intent: share_landmarks_activities
+    entities:
+    - landmarks_activities: "temples and museums"
+  - slot_was_set:
+    - landmarks_activities: ["temples", "museums"]
+  - action: trip_form
   - active_loop: null
   - slot_was_set:
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
 
 - story: multiple entities in first message
   steps:
   - intent: request_trip
     entities:
     - state: "Luxor"
-    - budget: "500 dollars"
+    - budget: "1500$"
     - duration: "3 days"
   - action: trip_form
   - active_loop: trip_form
   - slot_was_set:
     - state: "Luxor"
-    - budget: 500
+    - specify_place: true
+    - budget: 1500
     - duration: 3
   - action: trip_form
   - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: arrival_date
+  - intent: share_arrival_date
+    entities:
+    - arrival_date: "next week"
+  - slot_was_set:
+    - arrival_date: ["2024-03-25", "2024-03-31"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: hotel_features
+  - intent: share_hotel_features
+    entities:
+    - hotel_features: "pool and wifi"
+  - slot_was_set:
+    - hotel_features: ["pool", "wifi"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: landmarks_activities
+  - intent: share_landmarks_activities
+    entities:
+    - landmarks_activities: "temples and museums"
+  - slot_was_set:
+    - landmarks_activities: ["temples", "museums"]
+  - action: trip_form
   - active_loop: null
   - slot_was_set:
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
 
 - story: multiple entities in middle of form
   steps:
@@ -201,6 +347,7 @@
     - state: "Luxor"
   - slot_was_set:
     - state: "Luxor"
+    - specify_place: true
   - action: trip_form
   - slot_was_set:
     - requested_slot: budget
@@ -213,11 +360,39 @@
     - duration: 5
   - action: trip_form
   - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: arrival_date
+  - intent: share_arrival_date
+    entities:
+    - arrival_date: "next week"
+  - slot_was_set:
+    - arrival_date: ["2024-03-25", "2024-03-31"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: hotel_features
+  - intent: share_hotel_features
+    entities:
+    - hotel_features: "pool and wifi"
+  - slot_was_set:
+    - hotel_features: ["pool", "wifi"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: landmarks_activities
+  - intent: share_landmarks_activities
+    entities:
+    - landmarks_activities: "temples and museums"
+  - slot_was_set:
+    - landmarks_activities: ["temples", "museums"]
+  - action: trip_form
   - active_loop: null
   - slot_was_set:
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
 
 - story: out of order information
   steps:
@@ -226,7 +401,7 @@
   - active_loop: trip_form
   - intent: share_budget
     entities:
-    - budget: "500 dollars"
+    - budget: "$500"
   - slot_was_set:
     - budget: 500
   - action: trip_form
@@ -237,10 +412,48 @@
     - state: "Luxor"
   - slot_was_set:
     - state: "Luxor"
+    - specify_place: true
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: duration
+  - intent: share_duration
+    entities:
+    - duration: "3 days"
+  - slot_was_set:
+    - duration: 3
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: arrival_date
+  - intent: share_arrival_date
+    entities:
+    - arrival_date: "next week"
+  - slot_was_set:
+    - arrival_date: ["2024-03-25", "2024-03-31"]
+  - action: trip_form
+  - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: hotel_features
+  - intent: share_hotel_features
+    entities:
+    - hotel_features: "pool and wifi"
+  - slot_was_set:
+    - hotel_features: ["pool", "wifi"]
   - action: trip_form
   - active_loop: trip_form
+  - slot_was_set:
+    - requested_slot: landmarks_activities
+  - intent: share_landmarks_activities
+    entities:
+    - landmarks_activities: "temples and museums"
+  - slot_was_set:
+    - landmarks_activities: ["temples", "museums"]
+  - action: trip_form
   - active_loop: null
   - slot_was_set:
     - requested_slot: null
   - action: utter_start_suggestions
   - action: action_suggest_plan
+  - action: utter_edit_preference_or_suggest_trip
+  - action: action_listen
Index: APIs/recommendation_system/hotels_api.py
===================================================================
diff --git a/APIs/recommendation_system/hotels_api.py b/APIs/recommendation_system/hotels_api.py
new file mode 100644
--- /dev/null	(date 1749796266810)
+++ b/APIs/recommendation_system/hotels_api.py	(date 1749796266810)
@@ -0,0 +1,292 @@
+from rapidfuzz import fuzz
+from config_helper import get_db_params
+from fastapi import APIRouter, HTTPException
+import psycopg2
+from psycopg2 import pool
+from pydantic import BaseModel, Field
+from typing import List, Dict, Any, Set
+import math
+import logging
+import asyncio
+from contextlib import asynccontextmanager
+
+router = APIRouter()
+logger = logging.getLogger(__name__)
+
+DB_Prams = get_db_params()
+
+# Create a connection pool
+connection_pool = pool.ThreadedConnectionPool(
+    minconn=1,
+    maxconn=10,
+    **DB_Prams
+)
+
+def best_match_score(query: str, choices: List[str]) -> tuple:
+    """
+    Find the best matching score between a query and a list of choices.
+    
+    Args:
+        query: The search query
+        choices: List of possible matches
+        
+    Returns:
+        Tuple of (best match, score)
+    """
+    try:
+        scores = []
+        for choice in choices:
+            score = max(
+                fuzz.ratio(query, choice),
+                fuzz.partial_ratio(query, choice),
+                fuzz.token_sort_ratio(query, choice),
+                fuzz.token_set_ratio(query, choice)
+            )
+            scores.append((choice, score))
+        return max(scores, key=lambda x: x[1])
+    except Exception as e:
+        logger.error(f"Error in best_match_score: {str(e)}")
+        raise
+
+@asynccontextmanager
+async def get_db_connection():
+    """Get a database connection from the pool with retry logic."""
+    conn = None
+    max_retries = 3
+    retry_delay = 1
+    for attempt in range(max_retries):
+        try:
+            conn = connection_pool.getconn()
+            yield conn
+            break
+        except psycopg2.OperationalError as e:
+            logger.error(f"Database connection attempt {attempt + 1} failed: {str(e)}")
+            if attempt == max_retries - 1:
+                raise HTTPException(status_code=500, detail="Database connection failed after multiple attempts")
+            await asyncio.sleep(retry_delay)
+            retry_delay *= 2
+        finally:
+            if conn:
+                try:
+                    connection_pool.putconn(conn)
+                except Exception as e:
+                    logger.error(f"Error returning connection to pool: {str(e)}")
+
+async def get_facilities_ids(conn, user_facilities: List[str]) -> Dict[str, int]:
+    """
+    Get facility IDs based on user preferences using fuzzy matching.
+    
+    Args:
+        conn: Database connection
+        user_facilities: List of user's preferred facilities
+        
+    Returns:
+        Dictionary mapping user facilities to their IDs
+    """
+    try:
+        with conn.cursor() as cur:
+            # Get hotel facilities
+            cur.execute("SELECT facility_id, name FROM hotel_facilities")
+            facilities_ids = cur.fetchall()
+            
+            # Get room facilities
+            cur.execute("SELECT room_facility_id, name FROM room_facilities")
+            room_facilities = cur.fetchall()
+            
+            all_facilities = facilities_ids + room_facilities
+            facilities_names = [facility[1] for facility in all_facilities]
+            facilities_dic = {}
+            
+            # Use fuzzy matching to find the best match for each user facility
+            for user_facility in user_facilities:
+                match, best_match = best_match_score(user_facility.lower(), [name.lower() for name in facilities_names])
+                logger.info(f"Facility matching: {match}, {best_match}, {user_facility}")
+                
+                if best_match >= 80:
+                    for f_id, name in all_facilities:
+                        if name.lower() == match:
+                            facilities_dic[user_facility] = f_id
+                            break
+            
+            return facilities_dic
+    except Exception as e:
+        logger.error(f"Error in get_facilities_ids: {str(e)}")
+        raise HTTPException(status_code=500, detail="Error getting facilities")
+
+async def get_hotels_facilities(conn, city_name: str, facilities_ids: List[int], price_limit_per_night: float) -> Dict[int, Dict[str, Any]]:
+    """
+    Get hotels with their facilities based on city and price limit.
+    
+    Args:
+        conn: Database connection
+        city_name: Name of the city
+        facilities_ids: List of facility IDs
+        price_limit_per_night: Maximum price per night
+        
+    Returns:
+        Dictionary of hotels with their facilities
+    """
+    try:
+        with conn.cursor() as cur:
+            query = """
+                SELECT h.hotel_id, h.name, r.total_price, h.longitude, h.latitude, hf.facility_id, hf.name
+                FROM hotels h
+                JOIN hotels_facilities_rel hfr ON h.hotel_id = hfr.hotel_id
+                JOIN hotel_facilities hf ON hfr.facility_id = hf.facility_id
+                JOIN rooms r ON h.hotel_id = r.hotel_id
+                JOIN states s ON h.state_id = s.state_id
+                WHERE lower(s.name) LIKE %s AND hf.facility_id = ANY(%s)
+                AND r.total_price <= %s
+                LIMIT 10
+            """
+            cur.execute(query, ('%' + city_name.lower() + '%', facilities_ids, price_limit_per_night))
+            result = cur.fetchall()
+            
+            hotels = {}
+            for hotel in result:
+                if hotel[0] not in hotels:
+                    hotels[hotel[0]] = {
+                        "hotel_id": hotel[0],
+                        "hotel_name": hotel[1],
+                        "price_per_night": hotel[2],
+                        "longitude": hotel[3],
+                        "latitude": hotel[4],
+                        "facilities_ids": set(),
+                        "facilities": set()
+                    }
+                hotels[hotel[0]]["facilities_ids"].add(hotel[5])
+                hotels[hotel[0]]["facilities"].add(hotel[6])
+            
+            return hotels
+    except Exception as e:
+        logger.error(f"Error in get_hotels_facilities: {str(e)}")
+        raise HTTPException(status_code=500, detail="Error getting hotels")
+
+def calculate_matching_score(hotel_facilities: Dict[int, Dict[str, Any]], user_facilities: Set[str]) -> List[Dict[str, Any]]:
+    """
+    Calculate matching score for hotels based on facilities and price.
+    
+    Args:
+        hotel_facilities: Dictionary of hotels with their facilities
+        user_facilities: Set of user's preferred facilities
+        
+    Returns:
+        List of hotels sorted by matching score
+    """
+    try:
+        total_user_facilities = len(user_facilities)
+        if not total_user_facilities:
+            return list(hotel_facilities.values())
+            
+        # Calculate price range for normalization
+        prices = [hotel["price_per_night"] for hotel in hotel_facilities.values()
+                 if not math.isnan(hotel["price_per_night"])]
+        min_price = min(prices) if prices else 0
+        max_price = max(prices) if prices else 0
+        
+        alpha = 0.7  # Weight for facilities matching
+        beta = 0.3   # Weight for price matching
+        
+        for hotel_id, hotel_data in hotel_facilities.items():
+            # Calculate facilities matching score
+            matched_facilities = hotel_data["facilities"].intersection(user_facilities)
+            matching_score = len(matched_facilities) / total_user_facilities
+            
+            # Calculate price matching score
+            if math.isnan(hotel_data["price_per_night"]) or max_price == min_price:
+                normalized_price = 0.0
+            else:
+                normalized_price = 1 - (hotel_data["price_per_night"] - min_price) / (max_price - min_price)
+            
+            # Calculate final score
+            hotel_data["score"] = alpha * matching_score + beta * normalized_price
+        
+        # Sort hotels by score
+        return sorted(hotel_facilities.values(), key=lambda x: x["score"], reverse=True)
+    except Exception as e:
+        logger.error(f"Error in calculate_matching_score: {str(e)}")
+        raise HTTPException(status_code=500, detail="Error calculating scores")
+
+class HotelRequest(BaseModel):
+    city_name: str 
+    duration: int 
+    budget: float 
+    user_facilities: List[str] 
+
+class HotelResponse(BaseModel):
+    hotel_id: int 
+    hotel_name: str
+    longitude: float 
+    latitude: float 
+    facilities: List[str]
+    score: float
+    price_per_night: float
+
+@router.post("/recommend", response_model=Dict[str, List[HotelResponse]])
+async def get_hotels(request: HotelRequest):
+    """
+    Search for hotels based on city, budget, and preferred facilities.
+    
+    Args:
+        request: HotelRequest containing city, duration, budget, and facilities
+        
+    Returns:
+        Dictionary containing list of matching hotels
+    """
+    try:
+        logger.info(f"Received request for city: {request.city_name}, facilities: {request.user_facilities}")
+        
+        async with get_db_connection() as conn:
+            # Get facility IDs
+            facilities_ids = await get_facilities_ids(conn, request.user_facilities)
+            logger.info(f"Found facilities IDs: {facilities_ids}")
+            
+            if not facilities_ids:
+                raise HTTPException(
+                    status_code=400,
+                    detail="No matching facilities found for the provided preferences"
+                )
+            
+            # Calculate price limit per night
+            price_limit_per_night = request.budget / request.duration
+            logger.info(f"Price limit per night: {price_limit_per_night}")
+            
+            # Get hotels with facilities
+            hotels_facilities = await get_hotels_facilities(
+                conn, request.city_name, list(facilities_ids.values()), price_limit_per_night
+            )
+            logger.info(f"Found hotels with facilities: {len(hotels_facilities)}")
+            
+            if not hotels_facilities:
+                raise HTTPException(
+                    status_code=404,
+                    detail=f"No hotels found in {request.city_name} matching your criteria"
+                )
+            
+            # Calculate matching scores
+            sorted_hotels = calculate_matching_score(hotels_facilities, set(request.user_facilities))
+            
+            # Format response
+            hotels = []
+            for hotel in sorted_hotels:
+                hotel_data = {
+                    'hotel_id': hotel['hotel_id'],
+                    'hotel_name': hotel['hotel_name'],
+                    'longitude': hotel['longitude'],
+                    'latitude': hotel['latitude'],
+                    'facilities': list(hotel['facilities']),
+                    'score': hotel['score'],
+                    'price_per_night': None if math.isnan(hotel['price_per_night']) else hotel['price_per_night']
+                }
+                hotels.append(hotel_data)
+            
+            return {"hotels": hotels}
+            
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(f"Error in get_hotels: {str(e)}")
+        raise HTTPException(
+            status_code=500,
+            detail="An error occurred while searching for hotels"
+        )
\ No newline at end of file
Index: config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># The config recipe.\n# https://rasa.com/docs/rasa/model-configuration/\nrecipe: default.v1\n\n# The assistant project unique identifier\n# This default value must be replaced with a unique assistant name within your deployment\nassistant_id: 20250202-175814-recent-compass\n\n# Configuration for Rasa NLU.\n# https://rasa.com/docs/rasa/nlu/components/\nlanguage: en\n\n\ndatabase:\n  dbname: \"rahhal\"\n  user: \"neondb_owner\"\n  password: \"npg_sKBXgl5CxTd6\"\n  host: \"ep-long-band-a8dyarph-pooler.eastus2.azure.neon.tech\"\n  port: \"5432\"\n  sslmode: \"require\"\n\napis:\n  local_host: \"http://localhost:8000\"\n  ngrok: \"http://127.0.0.1:8000\"\n  embedding: \"http://localhost:8001/embedding\"\n  base_url: \"http://localhost:8002/api\"\n  rasa_server: \"http://localhost:5005/webhooks/rest/webhook\"\n  rasa_reset: \"http://localhost:5005/conversations/{conversation_id}/tracker/events\"\n\n\npipeline: null\n# # No configuration for the NLU pipeline was provided. The following default pipeline was used to train your model.\n# # If you'd like to customize it, uncomment and adjust the pipeline.\n# # See https://rasa.com/docs/rasa/tuning-your-model for more information.\n#   - name: WhitespaceTokenizer\n#   - name: RegexFeaturizer\n#   - name: LexicalSyntacticFeaturizer\n#   - name: CountVectorsFeaturizer\n#   - name: CountVectorsFeaturizer\n#     analyzer: char_wb\n#     min_ngram: 1\n#     max_ngram: 4\n#   - name: DIETClassifier\n#     epochs: 100\n#     constrain_similarities: true\n#   - name: EntitySynonymMapper\n#   - name: ResponseSelector\n#     epochs: 100\n#     constrain_similarities: true\n#   - name: FallbackClassifier\n#     threshold: 0.3\n#     ambiguity_threshold: 0.1\n\n# Configuration for Rasa Core.\n# https://rasa.com/docs/rasa/core/policies/\npolicies: null\n# # No configuration for policies was provided. The following default policies were used to train your model.\n# # If you'd like to customize them, uncomment and adjust the policies.\n# # See https://rasa.com/docs/rasa/policies for more information.\n#   - name: MemoizationPolicy\n#   - name: RulePolicy\n#   - name: UnexpecTEDIntentPolicy\n#     max_history: 5\n#     epochs: 100\n#   - name: TEDPolicy\n#     max_history: 5\n#     epochs: 100\n#     constrain_similarities: true\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config.yml b/config.yml
--- a/config.yml	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/config.yml	(date 1749796266821)
@@ -22,7 +22,7 @@
 apis:
   local_host: "http://localhost:8000"
   ngrok: "http://127.0.0.1:8000"
-  embedding: "http://localhost:8001/embedding"
+  embedding: "http://localhost:8001/api/embeddings/text"
   base_url: "http://localhost:8002/api"
   rasa_server: "http://localhost:5005/webhooks/rest/webhook"
   rasa_reset: "http://localhost:5005/conversations/{conversation_id}/tracker/events"
Index: APIs/recommendation_system/activities_api.py
===================================================================
diff --git a/APIs/recommendation_system/activities_api.py b/APIs/recommendation_system/activities_api.py
new file mode 100644
--- /dev/null	(date 1749796266565)
+++ b/APIs/recommendation_system/activities_api.py	(date 1749796266565)
@@ -0,0 +1,205 @@
+import aiohttp
+from config_helper import get_db_params, get_api_urls
+from fastapi import APIRouter, HTTPException
+from contextlib import asynccontextmanager
+import psycopg2
+from psycopg2 import pool
+from pydantic import BaseModel, Field
+from typing import List, Dict, Any, Optional
+import asyncio
+import logging
+
+router = APIRouter()
+logger = logging.getLogger(__name__)
+
+EMBEDDING_API_URL = get_api_urls().get('embedding')
+DB_Prams = get_db_params()
+
+ACTIVITY_QUERY = """
+    SELECT activity_id, A.name, A.description, 1 - (A.embedding <=> %s::vector) AS similarity, 
+           price, A.duration_in_hours, S.name as state_name
+    FROM activities A 
+    JOIN states S ON A.state_id = S.state_id
+    WHERE lower(S.name) LIKE %s 
+    ORDER BY similarity desc limit 50
+"""
+
+# Create a connection pool
+try:
+    connection_pool = pool.ThreadedConnectionPool(
+        minconn=1,
+        maxconn=10,
+        **DB_Prams
+    )
+except Exception as e:
+    logger.error(f"Failed to create connection pool: {str(e)}")
+    raise
+
+class ActivityRequestByText(BaseModel):
+    city_name: str
+    user_message: str
+    preferred_activities: List[str]
+
+class ActivityResponse(BaseModel):
+    id: int 
+    name: str 
+    description: str
+    score: float 
+    price: Optional[float]
+    duration: float
+    state: str 
+
+@asynccontextmanager
+async def get_db_connection():
+    """Get a database connection from the pool with retry logic."""
+    conn = None
+    max_retries = 3
+    retry_delay = 1
+    for attempt in range(max_retries):
+        try:
+            conn = connection_pool.getconn()
+            yield conn
+            break
+        except psycopg2.OperationalError as e:
+            logger.error(f"Database connection attempt {attempt + 1} failed: {str(e)}")
+            if attempt == max_retries - 1:
+                raise HTTPException(status_code=500, detail="Database connection failed after multiple attempts")
+            await asyncio.sleep(retry_delay)
+            retry_delay *= 2
+        finally:
+            if conn:
+                try:
+                    connection_pool.putconn(conn)
+                except Exception as e:
+                    logger.error(f"Error returning connection to pool: {str(e)}")
+
+def convert_row_to_dict(row: tuple) -> Dict[str, Any]:
+    """Convert database row to dictionary format."""
+    try:
+        return {
+            "id": row[0],
+            "name": row[1],
+            "description": row[2],
+            "score": round(row[3] * 100, 2),  # Convert to percentage
+            "price": float(row[4]) if row[4] is not None else None,
+            "duration": row[5],
+            "state": row[6]
+        }
+    except Exception as e:
+        logger.error(f"Error converting row to dict: {str(e)}")
+        raise
+
+async def get_embedding(text: str) -> Optional[List[float]]:
+    """Get embedding for text using the embedding API."""
+    try:
+        if not text or not text.strip():
+            logger.warning("Empty text provided for embedding")
+            return None
+            
+        async with aiohttp.ClientSession() as session:
+            async with session.post(
+                EMBEDDING_API_URL,
+                json={"text": text},
+                timeout=10
+            ) as response:
+                if response.status == 200:
+                    result = await response.json()
+                    if 'embedding' not in result:
+                        logger.error(f"No embedding in response: {result}")
+                        return None
+                    return result['embedding']
+                else:
+                    logger.error(f"Error getting embedding: {response.status}")
+                    return None
+    except aiohttp.ClientTimeout:
+        logger.error("Embedding API request timed out")
+        return None
+    except aiohttp.ClientError as e:
+        logger.error(f"Error calling embedding API: {str(e)}")
+        return None
+    except Exception as e:
+        logger.error(f"Unexpected error getting embedding: {str(e)}")
+        return None
+
+async def get_activities_by_text(conn, city_name: str, user_message: str) -> List[Dict[str, Any]]:
+    """Get activities based on user message similarity."""
+    try:
+        embedding = await get_embedding(user_message)
+        if not embedding:
+            return []
+            
+        with conn.cursor() as cursor:
+            cursor.execute(ACTIVITY_QUERY, (embedding, f'%{city_name.lower()}%'))
+            return [convert_row_to_dict(row) for row in cursor.fetchall()]
+    except Exception as e:
+        logger.error(f"Error in get_activities_by_text: {str(e)}")
+        return []
+
+async def get_activities_by_user_activities(conn, city_name: str, user_activities: List[str]) -> List[Dict[str, Any]]:
+    """Get activities based on user preferred activities."""
+    try:
+        activities_list = []
+        with conn.cursor() as cursor:
+            for activity in user_activities:
+                embedding = await get_embedding(activity)
+                if not embedding:
+                    continue
+                    
+                cursor.execute(ACTIVITY_QUERY, (embedding, f'%{city_name.lower()}%'))
+                activities_list.extend(convert_row_to_dict(row) for row in cursor.fetchall())
+                
+        # Remove duplicates while preserving order
+        return list({activity['id']: activity for activity in activities_list}.values())
+    except Exception as e:
+        logger.error(f"Error in get_activities_by_user_activities: {str(e)}")
+        return []
+
+@router.post("/recommend", response_model=Dict[str, List[ActivityResponse]])
+async def get_activities(request: ActivityRequestByText):
+    """
+    Search for activities based on user message and preferred activities.
+    
+    Args:
+        request: ActivityRequestByText containing city name, user message, and preferred activities
+        
+    Returns:
+        Dictionary containing list of activities
+    """
+    try:
+        async with get_db_connection() as conn:
+            # Search for Activities by user message
+            activities_by_message = await get_activities_by_text(conn, request.city_name, request.user_message)
+
+            # Search for Activities by user activities
+            activities_by_user_activities = []
+            if request.preferred_activities:
+                activities_by_user_activities = await get_activities_by_user_activities(
+                    conn, request.city_name, request.preferred_activities
+                )
+
+            # Combine and deduplicate results
+            activity_list = activities_by_message + activities_by_user_activities
+            activity_list = list({activity['id']: activity for activity in activity_list}.values())
+            
+            # Sort by similarity score
+            activity_list.sort(key=lambda x: x['score'], reverse=True)
+
+            if not activity_list:
+                raise HTTPException(
+                    status_code=404,
+                    detail=f"No activities found in {request.city_name}"
+                )
+
+            return {"activities": activity_list}
+            
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(f"Error in get_activities: {str(e)}")
+        raise HTTPException(
+            status_code=500,
+            detail="An error occurred while searching for activities"
+        )
+
+
+
Index: APIs/recommendation_system/cities_api.py
===================================================================
diff --git a/APIs/recommendation_system/cities_api.py b/APIs/recommendation_system/cities_api.py
new file mode 100644
--- /dev/null	(date 1749796266763)
+++ b/APIs/recommendation_system/cities_api.py	(date 1749796266763)
@@ -0,0 +1,255 @@
+from typing import List, Dict, Any
+import aiohttp
+from pydantic import BaseModel, Field
+from config_helper import get_db_params, get_api_urls
+from fastapi import APIRouter, HTTPException
+import psycopg2
+import json
+import logging
+from contextlib import asynccontextmanager
+
+router = APIRouter()
+logger = logging.getLogger(__name__)
+
+EMBEDDING_API_URL = get_api_urls().get('embedding')
+DB_Prams = get_db_params()
+
+# Define common features and their keywords with weights
+FEATURES = {
+    'sea': {
+        'keywords': ['sea', 'beach', 'coast', 'shore', 'ocean', 'mediterranean', 'red sea', 'marine', 'waterfront', 'seaside'],
+        'weight': 1.5  # Higher weight for sea-related features
+    },
+    'desert': {
+        'keywords': ['desert', 'sahara', 'sand', 'oasis', 'dunes', 'arid', 'dry'],
+        'weight': 1.2
+    },
+    'historical': {
+        'keywords': ['historical', 'ancient', 'pharaonic', 'temple', 'pyramid', 'museum', 'antique', 'heritage', 'ruins', 'archaeological'],
+        'weight': 1.3
+    },
+    'modern': {
+        'keywords': ['modern', 'city', 'urban', 'metropolitan', 'contemporary', 'developed', 'quiet', 'peaceful', 'calm', 'serene'],
+        'weight': 1.1
+    },
+    'nature': {
+        'keywords': ['nature', 'garden', 'park', 'river', 'nile', 'green', 'scenic', 'landscape', 'outdoor', 'wildlife'],
+        'weight': 1.2
+    },
+    'religious': {
+        'keywords': ['mosque', 'church', 'religious', 'spiritual', 'sacred', 'holy', 'pilgrimage', 'worship'],
+        'weight': 1.1
+    },
+    'cultural': {
+        'keywords': ['cultural', 'art', 'music', 'festival', 'tradition', 'local', 'custom', 'heritage', 'folklore'],
+        'weight': 1.2
+    },
+    'adventure': {
+        'keywords': ['adventure', 'sports', 'activity', 'exciting', 'thrilling', 'diving', 'snorkeling', 'hiking', 'exploring'],
+        'weight': 1.3
+    },
+    'luxury': {
+        'keywords': ['luxury', 'upscale', 'premium', 'high-end', 'exclusive', 'resort', 'spa', 'golf', 'yacht'],
+        'weight': 1.2
+    },
+    'family': {
+        'keywords': ['family', 'children', 'kids', 'friendly', 'safe', 'playground', 'entertainment', 'suitable'],
+        'weight': 1.1
+    }
+}
+
+class CityRequest(BaseModel):
+    city_description: str
+
+class CityResponse(BaseModel):
+    name: str
+    description: str
+    longitude: float 
+    latitude: float
+    matched_features: List[Dict[str, Any]] = []  # List of matched features with their weights
+    match_score: float = 0.0  # Overall match score
+
+def extract_features(text: str) -> List[Dict[str, Any]]:
+    """Extract relevant features from the text with their weights."""
+    text = text.lower()
+    found_features = []
+    
+    # Check for each feature and its keywords
+    for feature, data in FEATURES.items():
+        matched_keywords = []
+        for keyword in data['keywords']:
+            if keyword in text:
+                matched_keywords.append(keyword)
+        
+        if matched_keywords:
+            found_features.append({
+                'name': feature,
+                'weight': data['weight'],
+                'matched_keywords': matched_keywords
+            })
+    
+    return found_features
+
+@asynccontextmanager
+async def get_db_connection():
+    """Create and manage a database connection."""
+    conn = None
+    try:
+        conn = psycopg2.connect(**DB_Prams)
+        yield conn
+    except Exception as e:
+        logger.error(f"Database connection error: {str(e)}")
+        raise HTTPException(status_code=500, detail="Database connection failed")
+    finally:
+        if conn:
+            conn.close()
+
+async def get_embedding(text: str) -> List[float]:
+    """Get embedding for text using the embedding API."""
+    try:
+        async with aiohttp.ClientSession() as session:
+            async with session.post(
+                EMBEDDING_API_URL,
+                json={"text": text},
+                timeout=10
+            ) as response:
+                if response.status != 200:
+                    raise HTTPException(
+                        status_code=500,
+                        detail="Failed to get embedding from embedding service"
+                    )
+                
+                result = await response.json()
+                if "embedding" not in result:
+                    raise HTTPException(
+                        status_code=500,
+                        detail="Invalid embedding response format"
+                    )
+                return result["embedding"]
+    except aiohttp.ClientTimeout:
+        raise HTTPException(
+            status_code=504,
+            detail="Embedding service timeout"
+        )
+    except aiohttp.ClientError as e:
+        logger.error(f"Embedding API error: {str(e)}")
+        raise HTTPException(
+            status_code=500,
+            detail="Error calling embedding service"
+        )
+
+@router.post("/recommend", response_model=Dict[str, List[CityResponse]])
+async def get_cities(request: CityRequest):
+    """
+    Search for cities based on description and features.
+   
+    """
+    try:
+        # Extract features from the description
+        features = extract_features(request.city_description)
+        logger.info(f"Extracted features: {features}")
+        
+        # Get the user messages embedding
+        user_msgs_embedding = await get_embedding(request.city_description)
+        
+        # Base query with semantic similarity
+        base_query = """
+            WITH city_scores AS (
+                SELECT 
+                    name, 
+                    description,
+                    longitude,
+                    latitude,
+                    1 - (embedding <=> %s::vector) AS semantic_similarity,
+                    CASE 
+        """
+        
+        # Add feature-based scoring
+        if features:
+            feature_conditions = []
+            for feature in features:
+                feature_name = feature['name']
+                weight = feature['weight']
+                keywords = FEATURES[feature_name]['keywords']
+                keyword_conditions = " OR ".join([f"description ILIKE %s OR name ILIKE %s" for _ in keywords])
+                feature_conditions.append(f"WHEN ({keyword_conditions}) THEN {weight}")
+            base_query += "\n".join(feature_conditions)
+        else:
+            base_query += "WHEN 1=1 THEN 1"
+            
+        base_query += """
+                    ELSE 1
+                    END as feature_score
+                FROM states
+            )
+            SELECT 
+                name,
+                description,
+                longitude,
+                latitude,
+                (semantic_similarity * 0.7 + feature_score * 0.3) as combined_score
+            FROM city_scores
+            ORDER BY combined_score DESC
+            LIMIT 3
+        """
+        
+        # Prepare parameters for the query
+        params = [user_msgs_embedding]
+        if features:
+            for feature in features:
+                feature_name = feature['name']
+                keywords = FEATURES[feature_name]['keywords']
+                for keyword in keywords:
+                    params.extend([f'%{keyword}%', f'%{keyword}%'])
+        
+        async with get_db_connection() as conn:
+            with conn.cursor() as cur:
+                # Execute the query
+                cur.execute(base_query, params)
+                cities = cur.fetchall()
+
+                if not cities:
+                    return {"top_cities": []}
+                
+                # For each city, find which features matched
+                cities_list = []
+                for city in cities:
+                    city_name = city[0]
+                    city_desc = city[1]
+                    matched_features = []
+                    
+                    # Check which features match this city
+                    for feature in features:
+                        feature_name = feature['name']
+                        keywords = FEATURES[feature_name]['keywords']
+                        matched_keywords = [k for k in keywords if k.lower() in city_desc.lower() or k.lower() in city_name.lower()]
+                        if matched_keywords:
+                            matched_features.append({
+                                'name': feature_name,
+                                'weight': feature['weight'],
+                                'matched_keywords': matched_keywords
+                            })
+                    
+                    cities_list.append({
+                        "name": city_name,
+                        "description": city_desc,
+                        "longitude": city[2],
+                        "latitude": city[3],
+                        "matched_features": matched_features,
+                        "match_score": float(city[4])  # combined_score from the query
+                    })
+                
+                return {"top_cities": cities_list}
+
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(f"Error in get_cities: {str(e)}")
+        raise HTTPException(
+            status_code=500,
+            detail="An error occurred while processing your request"
+        )
+
+
+
+
Index: APIs/recommendation_system/combined_api.py
===================================================================
diff --git a/APIs/recommendation_system/combined_api.py b/APIs/recommendation_system/combined_api.py
new file mode 100644
--- /dev/null	(date 1749796266712)
+++ b/APIs/recommendation_system/combined_api.py	(date 1749796266712)
@@ -0,0 +1,61 @@
+from fastapi import FastAPI, Request
+from fastapi.middleware.cors import CORSMiddleware
+from fastapi.responses import JSONResponse
+import logging
+import time
+
+# Configure logging
+logging.basicConfig(
+    level=logging.INFO,
+    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
+)
+logger = logging.getLogger(__name__)
+
+# Import all the routers
+from .cities_api import router as cities_router
+from .hotels_api import router as hotels_router
+from .activities_api import router as activities_router
+from .plans_api import router as plans_router
+from .landmarks_api import router as landmarks_router
+from .trips_api import router as trips_router
+
+app = FastAPI(title="Egypt Smart Journey Planner API")
+
+# Add CORS middleware
+app.add_middleware(
+    CORSMiddleware,
+    allow_origins=["*"],  # You can restrict this to specific origins
+    allow_credentials=True,
+    allow_methods=["*"],
+    allow_headers=["*"],
+)
+
+# Add request timing middleware
+@app.middleware("http")
+async def add_process_time_header(request: Request, call_next):
+    start_time = time.time()
+    response = await call_next(request)
+    process_time = time.time() - start_time
+    response.headers["X-Process-Time"] = str(process_time)
+    return response
+
+# Global exception handler
+@app.exception_handler(Exception)
+async def global_exception_handler(request: Request, exc: Exception):
+    logger.error(f"Global error handler caught: {str(exc)}")
+    return JSONResponse(
+        status_code=500,
+        content={"detail": "An unexpected error occurred. Please try again later."}
+    )
+
+# Include all routers with their prefixes
+app.include_router(cities_router, prefix="/cities", tags=["Cities"])
+app.include_router(hotels_router, prefix="/hotels", tags=["Hotels"])
+app.include_router(activities_router, prefix="/activities", tags=["Activities"])
+app.include_router(plans_router, prefix="/plans", tags=["Plans"])
+app.include_router(landmarks_router, prefix="/landmarks", tags=["Landmarks"])
+app.include_router(trips_router, prefix="/trips", tags=["Trips"])
+
+if __name__ == "__main__":
+    import uvicorn
+    uvicorn.run(app, host="0.0.0.0", port=8002) 
\ No newline at end of file
Index: APIs/recommendation_system/plans_api.py
===================================================================
diff --git a/APIs/recommendation_system/plans_api.py b/APIs/recommendation_system/plans_api.py
new file mode 100644
--- /dev/null	(date 1749796266631)
+++ b/APIs/recommendation_system/plans_api.py	(date 1749796266631)
@@ -0,0 +1,219 @@
+import heapq
+from fastapi import APIRouter, HTTPException
+from pydantic import BaseModel, Field
+from typing import List, Dict, Any
+import logging
+
+router = APIRouter()
+logger = logging.getLogger(__name__)
+
+class PlanRequest(BaseModel):
+    city_name: str
+    budget: float
+    duration: int
+    suggested_hotels: List[dict]
+    suggested_activities: List[dict]
+    suggested_landmarks: List[dict]
+
+class PlanResponse(BaseModel):
+    hotel: Dict[str, Any] 
+    activities: List[Dict[str, Any]] 
+    landmarks: List[Dict[str, Any]] 
+    total_plan_cost: float
+
+def search_optimal_items(budget: float, activity_landmark_options: List[Dict[str, Any]]) -> tuple:
+    """
+    Search for optimal combination of activities and landmarks within budget.
+    
+    Args:
+        budget: Available budget
+        activity_landmark_options: List of activities and landmarks with prices and scores
+        
+    Returns:
+        Tuple of (max_value, selected_options)
+    """
+    try:
+        scale = 100
+        max_b = int(budget * scale) + 1
+        dp = [0] * max_b
+        selected_options = [[] for _ in range(max_b)]
+        
+        for option in activity_landmark_options:
+            price = int(option.get('price', 0) * scale)
+            if price <= 0:
+                continue
+            for b in range(max_b - 1, price - 1, -1):
+                new_value = dp[b - price] + option.get('score', 0)
+                if new_value > dp[b]:
+                    dp[b] = new_value
+                    selected_options[b] = selected_options[b - price] + [option]
+        
+        max_value = max(dp)
+        max_index = dp.index(max_value)
+        return max_value, selected_options[max_index]
+    except Exception as e:
+        logger.error(f"Error in search_optimal_items: {str(e)}")
+        raise
+
+def separate_activities_landmarks(
+    selected_options: List[Dict[str, Any]],
+    activities: List[Dict[str, Any]],
+    landmarks: List[Dict[str, Any]]
+) -> tuple:
+    """
+    Separate selected options into activities and landmarks.
+    
+    Args:
+        selected_options: List of selected options
+        activities: List of all activities
+        landmarks: List of all landmarks
+        
+    Returns:
+        Tuple of (activities_options, landmarks_options)
+    """
+    try:
+        activities_options = [item for item in selected_options if item in activities][:5]
+        landmarks_options = [item for item in selected_options if item in landmarks][:5]
+        return activities_options, landmarks_options
+    except Exception as e:
+        logger.error(f"Error in separate_activities_landmarks: {str(e)}")
+        raise
+
+def calculate_similarity(comb1: Dict[str, Any], comb2: Dict[str, Any]) -> int:
+    """
+    Calculate similarity between two plan combinations.
+    
+    Args:
+        comb1: First plan combination
+        comb2: Second plan combination
+        
+    Returns:
+        Similarity score
+    """
+    try:
+        hotel_overlap = int(comb1['hotel']['hotel_id'] == comb2['hotel']['hotel_id'])
+        activity_overlap = len(set(a['id'] for a in comb1['activities']) & set(a['id'] for a in comb2['activities']))
+        landmark_overlap = len(set(l['id'] for l in comb1['landmarks']) & set(l['id'] for l in comb2['landmarks']))
+        return hotel_overlap + activity_overlap + landmark_overlap
+    except Exception as e:
+        logger.error(f"Error in calculate_similarity: {str(e)}")
+        raise
+
+async def find_best_plan_options(
+    hotels: List[Dict[str, Any]],
+    activities: List[Dict[str, Any]],
+    landmarks: List[Dict[str, Any]],
+    budget: float,
+    duration: int
+) -> List[Dict[str, Any]]:
+    """
+    Find best plan options based on budget and duration.
+    
+    Args:
+        hotels: List of hotels
+        activities: List of activities
+        landmarks: List of landmarks
+        budget: Available budget
+        duration: Duration in days
+        
+    Returns:
+        List of best plan combinations
+    """
+    try:
+        activity_landmark_options = activities + landmarks
+        for item in activity_landmark_options:
+            if item.get('price') is None:
+                item['price'] = 0.0
+        
+        best_options = []
+        activity_landmark_options.sort(key=lambda x: x.get('score', 0), reverse=True)
+        
+        for hotel in hotels:
+            hotel['price_per_night'] = hotel.get('price_per_night', 0) * duration
+            remaining_budget = budget - hotel['price_per_night']
+            
+            if remaining_budget <= 0:
+                continue
+                
+            options_score, selected_options = search_optimal_items(remaining_budget, activity_landmark_options)
+            options_cost = sum(a.get('price', 0) for a in selected_options)
+            total_cost = options_cost + hotel['price_per_night']
+            total_score = options_score + hotel.get('score', 0)
+            
+            activities_options, landmarks_options = separate_activities_landmarks(
+                selected_options, activities, landmarks
+            )
+
+            plan_combination = {
+                "hotel": hotel,
+                "activities": activities_options,
+                "landmarks": landmarks_options,
+                "total_score": total_score,
+                "total_plan_cost": total_cost
+            }
+            
+            if len(best_options) < 3:
+                heapq.heappush(best_options, (total_score, plan_combination))
+            elif total_score > best_options[0][0]:
+                heapq.heappushpop(best_options, (total_score, plan_combination))
+
+        return [item[1] for item in sorted(best_options, key=lambda x: x[0], reverse=True)]
+    except Exception as e:
+        logger.error(f"Error in find_best_plan_options: {str(e)}")
+        raise
+
+@router.post("/recommend", response_model=Dict[str, List[PlanResponse]])
+async def create_plan(request: PlanRequest):
+    """
+    Create travel plan based on user preferences.
+    
+    Args:
+        request: PlanRequest containing city, budget, duration, and suggestions
+        
+    Returns:
+        Dictionary containing list of plan combinations
+    """
+    try:
+        # Validate input
+        if not request.suggested_hotels:
+            raise HTTPException(status_code=400, detail="No hotels provided")
+        if not request.suggested_activities and not request.suggested_landmarks:
+            raise HTTPException(status_code=400, detail="No activities or landmarks provided")
+        
+        # Get plan combinations
+        plan_combinations = await find_best_plan_options(
+            request.suggested_hotels,
+            request.suggested_activities,
+            request.suggested_landmarks,
+            request.budget,
+            request.duration
+        )
+        
+        if not plan_combinations:
+            raise HTTPException(
+                status_code=404,
+                detail="No valid plan combinations found for the given budget and duration"
+            )
+        
+        # Format response
+        displayed_plan_combinations = []
+        for plan_combination in plan_combinations:
+            temp = {
+                'hotel': plan_combination['hotel'],
+                'activities': plan_combination['activities'],
+                'landmarks': plan_combination['landmarks'],
+                'total_plan_cost': plan_combination['total_plan_cost']
+            }
+            displayed_plan_combinations.append(temp)
+            
+        return {"plan_combinations": displayed_plan_combinations}
+        
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(f"Error in create_plan: {str(e)}")
+        raise HTTPException(
+            status_code=500,
+            detail="An error occurred while creating the plan"
+        )
+
Index: APIs/chatbot_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nfrom anyio.abc import value\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException\nfrom fastapi.responses import HTMLResponse\nimport requests\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom config_helper import  get_api_urls\n\napp = FastAPI()\n\nNGROK_URL = get_api_urls().get('ngrok')\nLOCAL_HOST_URL = get_api_urls().get('local')\nRASA_SERVER_URL = get_api_urls().get('rasa_server')\nRASA_RESET_URL = get_api_urls().get('rasa_reset')\nSUGGEST_PLAN_URL = get_api_urls().get('suggest_plan')\nSUGGEST_HOTELS_URL = get_api_urls().get('suggest_hotels')\nSUGGEST_LANDMARKS_ACTIVITIES_URL = get_api_urls().get('suggest_landmarks_activities')\n\n\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        LOCAL_HOST_URL,\n        NGROK_URL\n    ],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\nconnections = {}\n\n\nSUGGEST_MSG=\"suggest your trip\"\n\n# after finishing testing, set the conversation_id to int and replace every id with conversation_id\n@app.websocket(\"/ws/{conversation_id}\")\nasync def manage_chat_session(websocket: WebSocket, conversation_id: str):\n    await websocket.accept()\n    connections[conversation_id] = websocket\n\n    try:\n        while True:\n            data = await websocket.receive_text()\n            if data.strip():\n                await websocket.send_text(f\"You: {data}\")\n                print(f\"User {conversation_id} sent: {data}\")\n\n                response = requests.post(RASA_SERVER_URL, json={\"sender\": conversation_id, \"message\": data})\n\n                if response.status_code == 200:\n                    messages = response.json()\n\n                    for msg in messages:\n                        text = msg.get(\"text\", \"\")\n                        await websocket.send_text(f'Rahhal: {text}')\n                else:\n                    await websocket.send_text(\"Rahhal: Error connecting to the server.\")\n    except WebSocketDisconnect:\n        print(f\"User {conversation_id} disconnected.\")\n        connections.pop(conversation_id, None)\n    except Exception as e:\n        await websocket.send_text(f\"Rahhal: An error occurred - {str(e)}\")\n        await websocket.close()\n\n# don't forget to change the user_id to int and replace id with conversation_id\n# Reset chat\n\n@app.post(\"/reset_chat/{conversation_id}\")\nasync def reset_chat(conversation_id: str):\n    try:\n        reset_payload = {\"event\": \"restart\", \"timestamp\": None}\n        response = requests.post(RASA_RESET_URL.format(conversation_id=conversation_id), json=reset_payload)\n\n        if response.status_code == 200:\n            return {\"status\": \"success\", \"message\": f\"Chat reset for {conversation_id}.\"}\n        else:\n            raise HTTPException(status_code=500, detail=\"Failed to reset chat in Rasa.\")\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\nif __name__ == \"__main__\":\n    import  uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIs/chatbot_api.py b/APIs/chatbot_api.py
--- a/APIs/chatbot_api.py	(revision 65afd03d54365f9bd4047233bede59f479d268df)
+++ b/APIs/chatbot_api.py	(date 1749796266829)
@@ -1,7 +1,4 @@
-import json
-from anyio.abc import value
 from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
-from fastapi.responses import HTMLResponse
 import requests
 from fastapi.middleware.cors import CORSMiddleware
 from config_helper import  get_api_urls
